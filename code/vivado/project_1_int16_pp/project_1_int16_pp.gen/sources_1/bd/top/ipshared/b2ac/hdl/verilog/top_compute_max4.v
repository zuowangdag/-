// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_compute_max4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ibf_0_address0,
        ibf_0_ce0,
        ibf_0_q0,
        ibf_1_address0,
        ibf_1_ce0,
        ibf_1_q0,
        ibf_2_address0,
        ibf_2_ce0,
        ibf_2_q0,
        ibf_3_address0,
        ibf_3_ce0,
        ibf_3_q0,
        obf_0_address0,
        obf_0_ce0,
        obf_0_we0,
        obf_0_d0,
        obf_1_address0,
        obf_1_ce0,
        obf_1_we0,
        obf_1_d0,
        obf_2_address0,
        obf_2_ce0,
        obf_2_we0,
        obf_2_d0,
        obf_3_address0,
        obf_3_ce0,
        obf_3_we0,
        obf_3_d0,
        min_ofm_h,
        min_ofm_w,
        ker_size,
        enable
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state15 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] ibf_0_address0;
output   ibf_0_ce0;
input  [15:0] ibf_0_q0;
output  [12:0] ibf_1_address0;
output   ibf_1_ce0;
input  [15:0] ibf_1_q0;
output  [12:0] ibf_2_address0;
output   ibf_2_ce0;
input  [15:0] ibf_2_q0;
output  [12:0] ibf_3_address0;
output   ibf_3_ce0;
input  [15:0] ibf_3_q0;
output  [10:0] obf_0_address0;
output   obf_0_ce0;
output   obf_0_we0;
output  [15:0] obf_0_d0;
output  [10:0] obf_1_address0;
output   obf_1_ce0;
output   obf_1_we0;
output  [15:0] obf_1_d0;
output  [10:0] obf_2_address0;
output   obf_2_ce0;
output   obf_2_we0;
output  [15:0] obf_2_d0;
output  [10:0] obf_3_address0;
output   obf_3_ce0;
output   obf_3_we0;
output  [15:0] obf_3_d0;
input  [7:0] min_ofm_h;
input  [7:0] min_ofm_w;
input  [7:0] ker_size;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ibf_0_ce0;
reg ibf_1_ce0;
reg ibf_2_ce0;
reg ibf_3_ce0;
reg obf_0_ce0;
reg obf_0_we0;
reg obf_1_ce0;
reg obf_1_we0;
reg obf_2_ce0;
reg obf_2_we0;
reg obf_3_ce0;
reg obf_3_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] temp_1;
reg   [15:0] temp_2;
reg   [15:0] temp_3;
reg   [15:0] temp_0;
reg   [31:0] indvar_flatten59_reg_214;
reg   [23:0] indvar_flatten25_reg_225;
reg   [15:0] indvar_flatten_reg_236;
reg   [7:0] hh_reg_247;
reg   [7:0] ww_reg_258;
reg   [7:0] k1_reg_269;
reg   [7:0] k2_reg_280;
wire   [0:0] enable_read_read_fu_86_p2;
wire   [15:0] bound_fu_295_p2;
reg   [15:0] bound_reg_845;
wire   [23:0] grp_fu_807_p2;
reg   [23:0] bound8_reg_861;
wire    ap_CS_fsm_state4;
wire   [8:0] sub_fu_318_p2;
reg   [8:0] sub_reg_876;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_814_p2;
reg   [31:0] bound30_reg_883;
wire   [0:0] cmp49_not_mid151_fu_324_p2;
reg   [0:0] cmp49_not_mid151_reg_888;
wire   [0:0] icmp_ln241_fu_330_p2;
reg   [0:0] icmp_ln241_reg_894;
wire   [0:0] icmp_ln240_fu_335_p2;
reg   [0:0] icmp_ln240_reg_900;
wire   [31:0] add_ln238_fu_340_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln238_fu_346_p2;
reg   [0:0] icmp_ln238_reg_910;
reg   [0:0] icmp_ln238_reg_910_pp0_iter1_reg;
reg   [0:0] icmp_ln238_reg_910_pp0_iter2_reg;
reg   [0:0] icmp_ln238_reg_910_pp0_iter3_reg;
reg   [0:0] icmp_ln238_reg_910_pp0_iter4_reg;
wire   [0:0] icmp_ln239_fu_351_p2;
reg   [0:0] icmp_ln239_reg_914;
wire   [0:0] select_ln238_6_fu_361_p3;
reg   [0:0] select_ln238_6_reg_925;
wire   [0:0] or_ln239_fu_368_p2;
reg   [0:0] or_ln239_reg_934;
wire   [15:0] select_ln240_4_fu_380_p3;
wire   [23:0] select_ln239_5_fu_394_p3;
wire   [7:0] select_ln238_1_fu_438_p3;
reg   [7:0] select_ln238_1_reg_949;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] trunc_ln253_fu_445_p1;
reg   [5:0] trunc_ln253_reg_955;
wire   [7:0] select_ln239_1_fu_497_p3;
reg   [7:0] select_ln239_1_reg_960;
wire   [7:0] select_ln240_3_fu_590_p3;
reg   [7:0] select_ln240_3_reg_971;
wire   [8:0] add33_fu_602_p2;
reg   [8:0] add33_reg_976;
reg   [8:0] add33_reg_976_pp0_iter2_reg;
wire   [0:0] empty_94_fu_614_p2;
reg   [0:0] empty_94_reg_981;
reg   [0:0] empty_94_reg_981_pp0_iter2_reg;
reg   [0:0] empty_94_reg_981_pp0_iter3_reg;
reg   [0:0] empty_94_reg_981_pp0_iter4_reg;
wire   [0:0] brmerge23_fu_625_p2;
reg   [0:0] brmerge23_reg_989;
reg   [0:0] brmerge23_reg_989_pp0_iter2_reg;
reg   [0:0] brmerge23_reg_989_pp0_iter3_reg;
reg   [0:0] brmerge23_reg_989_pp0_iter4_reg;
reg   [0:0] brmerge23_reg_989_pp0_iter5_reg;
wire   [7:0] k2_1_fu_631_p2;
wire   [10:0] add_ln253_1_fu_660_p2;
reg   [10:0] add_ln253_1_reg_998;
reg   [10:0] add_ln253_1_reg_998_pp0_iter3_reg;
reg   [10:0] add_ln253_1_reg_998_pp0_iter4_reg;
reg   [10:0] add_ln253_1_reg_998_pp0_iter5_reg;
wire   [15:0] storemerge_0_fu_694_p3;
reg   [15:0] storemerge_0_reg_1028;
wire   [15:0] storemerge_1_fu_725_p3;
reg   [15:0] storemerge_1_reg_1033;
wire   [15:0] storemerge_2_fu_756_p3;
reg   [15:0] storemerge_2_reg_1038;
wire   [15:0] storemerge_3_fu_787_p3;
reg   [15:0] storemerge_3_reg_1043;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state9;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [7:0] ap_phi_mux_hh_phi_fu_251_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_ww_phi_fu_262_p4;
reg   [7:0] ap_phi_mux_k1_phi_fu_273_p4;
wire   [31:0] zext_ln246_1_fu_669_p1;
wire   [31:0] zext_ln253_1_fu_800_p1;
wire   [7:0] bound_fu_295_p0;
wire   [15:0] cast_fu_291_p1;
wire   [7:0] bound_fu_295_p1;
wire   [8:0] ker_size_cast_fu_315_p1;
wire   [0:0] icmp_ln240_1_fu_356_p2;
wire   [15:0] add_ln240_1_fu_374_p2;
wire   [23:0] add_ln239_1_fu_388_p2;
wire   [6:0] trunc_ln240_fu_410_p1;
wire   [6:0] trunc_ln238_fu_402_p1;
wire   [8:0] zext_ln240_fu_406_p1;
wire   [7:0] hh_8_fu_425_p2;
wire   [6:0] trunc_ln238_1_fu_449_p1;
wire   [6:0] add_fu_414_p2;
wire   [0:0] cmp49_not_fu_420_p2;
wire   [0:0] icmp_ln241_1_fu_473_p2;
wire   [7:0] select_ln238_fu_431_p3;
wire   [7:0] ww_4_fu_484_p2;
wire   [6:0] select_ln238_2_fu_453_p3;
wire   [6:0] select_ln238_3_fu_460_p3;
wire   [0:0] select_ln238_4_fu_467_p3;
wire   [0:0] select_ln238_5_fu_478_p3;
wire   [7:0] select_ln239_fu_490_p3;
wire   [0:0] select_ln239_4_fu_521_p3;
wire   [0:0] or_ln240_fu_533_p2;
wire   [0:0] or_ln240_1_fu_538_p2;
wire   [7:0] k1_2_fu_527_p2;
wire   [6:0] trunc_ln240_1_fu_555_p1;
wire   [6:0] add_mid1_fu_559_p2;
wire   [6:0] select_ln239_2_fu_508_p3;
wire   [6:0] select_ln240_1_fu_565_p3;
wire   [8:0] zext_ln240_1_fu_551_p1;
wire   [0:0] cmp49_not_mid1_fu_577_p2;
wire   [0:0] select_ln239_3_fu_515_p3;
wire   [7:0] select_ln240_fu_543_p3;
wire   [8:0] zext_ln241_fu_598_p1;
wire   [8:0] zext_ln239_fu_504_p1;
wire   [7:0] empty_93_fu_608_p2;
wire   [0:0] select_ln240_2_fu_582_p3;
wire   [0:0] cmp53_not_fu_620_p2;
wire   [10:0] tmp_cast_fu_637_p3;
wire   [10:0] tmp_8_fu_644_p3;
wire   [10:0] add_ln253_fu_651_p2;
wire   [10:0] zext_ln253_fu_657_p1;
wire   [12:0] grp_fu_820_p3;
wire   [0:0] icmp_ln250_fu_680_p2;
wire   [15:0] select_ln250_fu_686_p3;
wire   [0:0] icmp_ln250_1_fu_711_p2;
wire   [15:0] select_ln250_1_fu_717_p3;
wire   [0:0] icmp_ln250_2_fu_742_p2;
wire   [15:0] select_ln250_2_fu_748_p3;
wire   [0:0] icmp_ln250_3_fu_773_p2;
wire   [15:0] select_ln250_3_fu_779_p3;
wire   [7:0] grp_fu_807_p0;
wire   [15:0] grp_fu_807_p1;
wire   [7:0] grp_fu_814_p0;
wire   [23:0] grp_fu_814_p1;
wire   [6:0] grp_fu_820_p0;
wire   [7:0] grp_fu_820_p1;
wire   [8:0] grp_fu_820_p2;
wire    ap_CS_fsm_state15;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] grp_fu_807_p00;
wire   [23:0] grp_fu_807_p10;
wire   [31:0] grp_fu_814_p00;
wire   [31:0] grp_fu_814_p10;
wire   [12:0] grp_fu_820_p00;
wire   [12:0] grp_fu_820_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 temp_1 = 16'd0;
#0 temp_2 = 16'd0;
#0 temp_3 = 16'd0;
#0 temp_0 = 16'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

top_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U61(
    .din0(bound_fu_295_p0),
    .din1(bound_fu_295_p1),
    .dout(bound_fu_295_p2)
);

top_mul_mul_8ns_16ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_8ns_16ns_24_4_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_807_p0),
    .din1(grp_fu_807_p1),
    .ce(1'b1),
    .dout(grp_fu_807_p2)
);

top_mul_mul_8ns_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
mul_mul_8ns_24ns_32_4_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_814_p0),
    .din1(grp_fu_814_p1),
    .ce(1'b1),
    .dout(grp_fu_814_p2)
);

top_mac_muladd_7ns_8ns_9ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
mac_muladd_7ns_8ns_9ns_13_4_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_820_p0),
    .din1(grp_fu_820_p1),
    .din2(grp_fu_820_p2),
    .ce(1'b1),
    .dout(grp_fu_820_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state9)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hh_reg_247 <= select_ln238_1_reg_949;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hh_reg_247 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln238_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten25_reg_225 <= select_ln239_5_fu_394_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten25_reg_225 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln238_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten59_reg_214 <= add_ln238_fu_340_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten59_reg_214 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln238_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_236 <= select_ln240_4_fu_380_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_236 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k1_reg_269 <= select_ln240_3_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k1_reg_269 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln238_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k2_reg_280 <= k2_1_fu_631_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        k2_reg_280 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ww_reg_258 <= select_ln239_1_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ww_reg_258 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln238_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add33_reg_976 <= add33_fu_602_p2;
        brmerge23_reg_989 <= brmerge23_fu_625_p2;
        empty_94_reg_981 <= empty_94_fu_614_p2;
        trunc_ln253_reg_955 <= trunc_ln253_fu_445_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add33_reg_976_pp0_iter2_reg <= add33_reg_976;
        add_ln253_1_reg_998_pp0_iter3_reg <= add_ln253_1_reg_998;
        add_ln253_1_reg_998_pp0_iter4_reg <= add_ln253_1_reg_998_pp0_iter3_reg;
        add_ln253_1_reg_998_pp0_iter5_reg <= add_ln253_1_reg_998_pp0_iter4_reg;
        brmerge23_reg_989_pp0_iter2_reg <= brmerge23_reg_989;
        brmerge23_reg_989_pp0_iter3_reg <= brmerge23_reg_989_pp0_iter2_reg;
        brmerge23_reg_989_pp0_iter4_reg <= brmerge23_reg_989_pp0_iter3_reg;
        brmerge23_reg_989_pp0_iter5_reg <= brmerge23_reg_989_pp0_iter4_reg;
        empty_94_reg_981_pp0_iter2_reg <= empty_94_reg_981;
        empty_94_reg_981_pp0_iter3_reg <= empty_94_reg_981_pp0_iter2_reg;
        empty_94_reg_981_pp0_iter4_reg <= empty_94_reg_981_pp0_iter3_reg;
        icmp_ln238_reg_910_pp0_iter2_reg <= icmp_ln238_reg_910_pp0_iter1_reg;
        icmp_ln238_reg_910_pp0_iter3_reg <= icmp_ln238_reg_910_pp0_iter2_reg;
        icmp_ln238_reg_910_pp0_iter4_reg <= icmp_ln238_reg_910_pp0_iter3_reg;
        storemerge_1_reg_1033 <= storemerge_1_fu_725_p3;
        storemerge_2_reg_1038 <= storemerge_2_fu_756_p3;
        storemerge_3_reg_1043 <= storemerge_3_fu_787_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln253_1_reg_998 <= add_ln253_1_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bound30_reg_883 <= grp_fu_814_p2;
        cmp49_not_mid151_reg_888 <= cmp49_not_mid151_fu_324_p2;
        icmp_ln240_reg_900 <= icmp_ln240_fu_335_p2;
        icmp_ln241_reg_894 <= icmp_ln241_fu_330_p2;
        sub_reg_876 <= sub_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound8_reg_861 <= grp_fu_807_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_86_p2 == 1'd1))) begin
        bound_reg_845 <= bound_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln238_reg_910 <= icmp_ln238_fu_346_p2;
        icmp_ln238_reg_910_pp0_iter1_reg <= icmp_ln238_reg_910;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln238_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln239_reg_914 <= icmp_ln239_fu_351_p2;
        or_ln239_reg_934 <= or_ln239_fu_368_p2;
        select_ln238_6_reg_925 <= select_ln238_6_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln238_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln238_1_reg_949 <= select_ln238_1_fu_438_p3;
        select_ln239_1_reg_960 <= select_ln239_1_fu_497_p3;
        select_ln240_3_reg_971 <= select_ln240_3_fu_590_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_reg_910_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        storemerge_0_reg_1028 <= storemerge_0_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln238_reg_910_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_0 <= storemerge_0_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_1 <= storemerge_1_fu_725_p3;
        temp_2 <= storemerge_2_fu_756_p3;
        temp_3 <= storemerge_3_fu_787_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln238_fu_346_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_hh_phi_fu_251_p4 = select_ln238_1_reg_949;
    end else begin
        ap_phi_mux_hh_phi_fu_251_p4 = hh_reg_247;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k1_phi_fu_273_p4 = select_ln240_3_reg_971;
    end else begin
        ap_phi_mux_k1_phi_fu_273_p4 = k1_reg_269;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln238_reg_910_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ww_phi_fu_262_p4 = select_ln239_1_reg_960;
    end else begin
        ap_phi_mux_ww_phi_fu_262_p4 = ww_reg_258;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_0_ce0 = 1'b1;
    end else begin
        ibf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_1_ce0 = 1'b1;
    end else begin
        ibf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_2_ce0 = 1'b1;
    end else begin
        ibf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_3_ce0 = 1'b1;
    end else begin
        ibf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_0_ce0 = 1'b1;
    end else begin
        obf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (brmerge23_reg_989_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_0_we0 = 1'b1;
    end else begin
        obf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_1_ce0 = 1'b1;
    end else begin
        obf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (brmerge23_reg_989_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_1_we0 = 1'b1;
    end else begin
        obf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_2_ce0 = 1'b1;
    end else begin
        obf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (brmerge23_reg_989_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_2_we0 = 1'b1;
    end else begin
        obf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_3_ce0 = 1'b1;
    end else begin
        obf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (brmerge23_reg_989_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        obf_3_we0 = 1'b1;
    end else begin
        obf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_86_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_86_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add33_fu_602_p2 = (zext_ln241_fu_598_p1 + zext_ln239_fu_504_p1);

assign add_fu_414_p2 = (trunc_ln240_fu_410_p1 + trunc_ln238_fu_402_p1);

assign add_ln238_fu_340_p2 = (indvar_flatten59_reg_214 + 32'd1);

assign add_ln239_1_fu_388_p2 = (indvar_flatten25_reg_225 + 24'd1);

assign add_ln240_1_fu_374_p2 = (indvar_flatten_reg_236 + 16'd1);

assign add_ln253_1_fu_660_p2 = (add_ln253_fu_651_p2 + zext_ln253_fu_657_p1);

assign add_ln253_fu_651_p2 = (tmp_cast_fu_637_p3 + tmp_8_fu_644_p3);

assign add_mid1_fu_559_p2 = (trunc_ln240_1_fu_555_p1 + select_ln238_2_fu_453_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_295_p0 = cast_fu_291_p1;

assign bound_fu_295_p1 = cast_fu_291_p1;

assign brmerge23_fu_625_p2 = (select_ln240_2_fu_582_p3 | cmp53_not_fu_620_p2);

assign cast_fu_291_p1 = ker_size;

assign cmp49_not_fu_420_p2 = ((zext_ln240_fu_406_p1 != sub_reg_876) ? 1'b1 : 1'b0);

assign cmp49_not_mid151_fu_324_p2 = ((sub_fu_318_p2 != 9'd0) ? 1'b1 : 1'b0);

assign cmp49_not_mid1_fu_577_p2 = ((zext_ln240_1_fu_551_p1 != sub_reg_876) ? 1'b1 : 1'b0);

assign cmp53_not_fu_620_p2 = ((zext_ln241_fu_598_p1 != sub_reg_876) ? 1'b1 : 1'b0);

assign empty_93_fu_608_p2 = (select_ln240_fu_543_p3 | select_ln240_3_fu_590_p3);

assign empty_94_fu_614_p2 = ((empty_93_fu_608_p2 == 8'd0) ? 1'b1 : 1'b0);

assign enable_read_read_fu_86_p2 = enable;

assign grp_fu_807_p0 = grp_fu_807_p00;

assign grp_fu_807_p00 = min_ofm_w;

assign grp_fu_807_p1 = grp_fu_807_p10;

assign grp_fu_807_p10 = bound_fu_295_p2;

assign grp_fu_814_p0 = grp_fu_814_p00;

assign grp_fu_814_p00 = min_ofm_h;

assign grp_fu_814_p1 = grp_fu_814_p10;

assign grp_fu_814_p10 = grp_fu_807_p2;

assign grp_fu_820_p0 = grp_fu_820_p00;

assign grp_fu_820_p00 = select_ln240_1_fu_565_p3;

assign grp_fu_820_p1 = 13'd81;

assign grp_fu_820_p2 = grp_fu_820_p20;

assign grp_fu_820_p20 = add33_reg_976_pp0_iter2_reg;

assign hh_8_fu_425_p2 = (ap_phi_mux_hh_phi_fu_251_p4 + 8'd1);

assign ibf_0_address0 = zext_ln246_1_fu_669_p1;

assign ibf_1_address0 = zext_ln246_1_fu_669_p1;

assign ibf_2_address0 = zext_ln246_1_fu_669_p1;

assign ibf_3_address0 = zext_ln246_1_fu_669_p1;

assign icmp_ln238_fu_346_p2 = ((indvar_flatten59_reg_214 == bound30_reg_883) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_351_p2 = ((indvar_flatten25_reg_225 == bound8_reg_861) ? 1'b1 : 1'b0);

assign icmp_ln240_1_fu_356_p2 = ((indvar_flatten_reg_236 == bound_reg_845) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_335_p2 = ((bound_reg_845 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln241_1_fu_473_p2 = ((k2_reg_280 == ker_size) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_330_p2 = ((ker_size == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln250_1_fu_711_p2 = (($signed(temp_1) > $signed(ibf_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln250_2_fu_742_p2 = (($signed(temp_2) > $signed(ibf_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln250_3_fu_773_p2 = (($signed(temp_3) > $signed(ibf_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_680_p2 = (($signed(temp_0) > $signed(ibf_0_q0)) ? 1'b1 : 1'b0);

assign k1_2_fu_527_p2 = (select_ln239_fu_490_p3 + 8'd1);

assign k2_1_fu_631_p2 = (select_ln240_fu_543_p3 + 8'd1);

assign ker_size_cast_fu_315_p1 = ker_size;

assign obf_0_address0 = zext_ln253_1_fu_800_p1;

assign obf_0_d0 = storemerge_0_reg_1028;

assign obf_1_address0 = zext_ln253_1_fu_800_p1;

assign obf_1_d0 = storemerge_1_reg_1033;

assign obf_2_address0 = zext_ln253_1_fu_800_p1;

assign obf_2_d0 = storemerge_2_reg_1038;

assign obf_3_address0 = zext_ln253_1_fu_800_p1;

assign obf_3_d0 = storemerge_3_reg_1043;

assign or_ln239_fu_368_p2 = (select_ln238_6_fu_361_p3 | icmp_ln239_fu_351_p2);

assign or_ln240_1_fu_538_p2 = (or_ln240_fu_533_p2 | icmp_ln239_reg_914);

assign or_ln240_fu_533_p2 = (select_ln239_4_fu_521_p3 | select_ln238_6_reg_925);

assign select_ln238_1_fu_438_p3 = ((icmp_ln239_reg_914[0:0] == 1'b1) ? hh_8_fu_425_p2 : ap_phi_mux_hh_phi_fu_251_p4);

assign select_ln238_2_fu_453_p3 = ((icmp_ln239_reg_914[0:0] == 1'b1) ? trunc_ln238_1_fu_449_p1 : trunc_ln238_fu_402_p1);

assign select_ln238_3_fu_460_p3 = ((icmp_ln239_reg_914[0:0] == 1'b1) ? trunc_ln238_1_fu_449_p1 : add_fu_414_p2);

assign select_ln238_4_fu_467_p3 = ((icmp_ln239_reg_914[0:0] == 1'b1) ? cmp49_not_mid151_reg_888 : cmp49_not_fu_420_p2);

assign select_ln238_5_fu_478_p3 = ((icmp_ln239_reg_914[0:0] == 1'b1) ? icmp_ln241_reg_894 : icmp_ln241_1_fu_473_p2);

assign select_ln238_6_fu_361_p3 = ((icmp_ln239_fu_351_p2[0:0] == 1'b1) ? icmp_ln240_reg_900 : icmp_ln240_1_fu_356_p2);

assign select_ln238_fu_431_p3 = ((icmp_ln239_reg_914[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_ww_phi_fu_262_p4);

assign select_ln239_1_fu_497_p3 = ((select_ln238_6_reg_925[0:0] == 1'b1) ? ww_4_fu_484_p2 : select_ln238_fu_431_p3);

assign select_ln239_2_fu_508_p3 = ((select_ln238_6_reg_925[0:0] == 1'b1) ? select_ln238_2_fu_453_p3 : select_ln238_3_fu_460_p3);

assign select_ln239_3_fu_515_p3 = ((select_ln238_6_reg_925[0:0] == 1'b1) ? cmp49_not_mid151_reg_888 : select_ln238_4_fu_467_p3);

assign select_ln239_4_fu_521_p3 = ((select_ln238_6_reg_925[0:0] == 1'b1) ? icmp_ln241_reg_894 : select_ln238_5_fu_478_p3);

assign select_ln239_5_fu_394_p3 = ((icmp_ln239_fu_351_p2[0:0] == 1'b1) ? 24'd1 : add_ln239_1_fu_388_p2);

assign select_ln239_fu_490_p3 = ((or_ln239_reg_934[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_k1_phi_fu_273_p4);

assign select_ln240_1_fu_565_p3 = ((select_ln239_4_fu_521_p3[0:0] == 1'b1) ? add_mid1_fu_559_p2 : select_ln239_2_fu_508_p3);

assign select_ln240_2_fu_582_p3 = ((select_ln239_4_fu_521_p3[0:0] == 1'b1) ? cmp49_not_mid1_fu_577_p2 : select_ln239_3_fu_515_p3);

assign select_ln240_3_fu_590_p3 = ((select_ln239_4_fu_521_p3[0:0] == 1'b1) ? k1_2_fu_527_p2 : select_ln239_fu_490_p3);

assign select_ln240_4_fu_380_p3 = ((or_ln239_fu_368_p2[0:0] == 1'b1) ? 16'd1 : add_ln240_1_fu_374_p2);

assign select_ln240_fu_543_p3 = ((or_ln240_1_fu_538_p2[0:0] == 1'b1) ? 8'd0 : k2_reg_280);

assign select_ln250_1_fu_717_p3 = ((icmp_ln250_1_fu_711_p2[0:0] == 1'b1) ? temp_1 : ibf_1_q0);

assign select_ln250_2_fu_748_p3 = ((icmp_ln250_2_fu_742_p2[0:0] == 1'b1) ? temp_2 : ibf_2_q0);

assign select_ln250_3_fu_779_p3 = ((icmp_ln250_3_fu_773_p2[0:0] == 1'b1) ? temp_3 : ibf_3_q0);

assign select_ln250_fu_686_p3 = ((icmp_ln250_fu_680_p2[0:0] == 1'b1) ? temp_0 : ibf_0_q0);

assign storemerge_0_fu_694_p3 = ((empty_94_reg_981_pp0_iter4_reg[0:0] == 1'b1) ? ibf_0_q0 : select_ln250_fu_686_p3);

assign storemerge_1_fu_725_p3 = ((empty_94_reg_981_pp0_iter4_reg[0:0] == 1'b1) ? ibf_1_q0 : select_ln250_1_fu_717_p3);

assign storemerge_2_fu_756_p3 = ((empty_94_reg_981_pp0_iter4_reg[0:0] == 1'b1) ? ibf_2_q0 : select_ln250_2_fu_748_p3);

assign storemerge_3_fu_787_p3 = ((empty_94_reg_981_pp0_iter4_reg[0:0] == 1'b1) ? ibf_3_q0 : select_ln250_3_fu_779_p3);

assign sub_fu_318_p2 = ($signed(ker_size_cast_fu_315_p1) + $signed(9'd511));

assign tmp_8_fu_644_p3 = {{select_ln238_1_reg_949}, {3'd0}};

assign tmp_cast_fu_637_p3 = {{trunc_ln253_reg_955}, {5'd0}};

assign trunc_ln238_1_fu_449_p1 = hh_8_fu_425_p2[6:0];

assign trunc_ln238_fu_402_p1 = ap_phi_mux_hh_phi_fu_251_p4[6:0];

assign trunc_ln240_1_fu_555_p1 = k1_2_fu_527_p2[6:0];

assign trunc_ln240_fu_410_p1 = ap_phi_mux_k1_phi_fu_273_p4[6:0];

assign trunc_ln253_fu_445_p1 = select_ln238_1_fu_438_p3[5:0];

assign ww_4_fu_484_p2 = (select_ln238_fu_431_p3 + 8'd1);

assign zext_ln239_fu_504_p1 = select_ln239_1_fu_497_p3;

assign zext_ln240_1_fu_551_p1 = k1_2_fu_527_p2;

assign zext_ln240_fu_406_p1 = ap_phi_mux_k1_phi_fu_273_p4;

assign zext_ln241_fu_598_p1 = select_ln240_fu_543_p3;

assign zext_ln246_1_fu_669_p1 = grp_fu_820_p3;

assign zext_ln253_1_fu_800_p1 = add_ln253_1_reg_998_pp0_iter5_reg;

assign zext_ln253_fu_657_p1 = select_ln239_1_reg_960;

endmodule //top_compute_max4
