// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_load_inputs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ifm_AWVALID,
        m_axi_ifm_AWREADY,
        m_axi_ifm_AWADDR,
        m_axi_ifm_AWID,
        m_axi_ifm_AWLEN,
        m_axi_ifm_AWSIZE,
        m_axi_ifm_AWBURST,
        m_axi_ifm_AWLOCK,
        m_axi_ifm_AWCACHE,
        m_axi_ifm_AWPROT,
        m_axi_ifm_AWQOS,
        m_axi_ifm_AWREGION,
        m_axi_ifm_AWUSER,
        m_axi_ifm_WVALID,
        m_axi_ifm_WREADY,
        m_axi_ifm_WDATA,
        m_axi_ifm_WSTRB,
        m_axi_ifm_WLAST,
        m_axi_ifm_WID,
        m_axi_ifm_WUSER,
        m_axi_ifm_ARVALID,
        m_axi_ifm_ARREADY,
        m_axi_ifm_ARADDR,
        m_axi_ifm_ARID,
        m_axi_ifm_ARLEN,
        m_axi_ifm_ARSIZE,
        m_axi_ifm_ARBURST,
        m_axi_ifm_ARLOCK,
        m_axi_ifm_ARCACHE,
        m_axi_ifm_ARPROT,
        m_axi_ifm_ARQOS,
        m_axi_ifm_ARREGION,
        m_axi_ifm_ARUSER,
        m_axi_ifm_RVALID,
        m_axi_ifm_RREADY,
        m_axi_ifm_RDATA,
        m_axi_ifm_RLAST,
        m_axi_ifm_RID,
        m_axi_ifm_RUSER,
        m_axi_ifm_RRESP,
        m_axi_ifm_BVALID,
        m_axi_ifm_BREADY,
        m_axi_ifm_BRESP,
        m_axi_ifm_BID,
        m_axi_ifm_BUSER,
        ifm_in,
        ifm_bf_0_address0,
        ifm_bf_0_ce0,
        ifm_bf_0_we0,
        ifm_bf_0_d0,
        ifm_bf_1_address0,
        ifm_bf_1_ce0,
        ifm_bf_1_we0,
        ifm_bf_1_d0,
        ifm_bf_2_address0,
        ifm_bf_2_ce0,
        ifm_bf_2_we0,
        ifm_bf_2_d0,
        ifm_bf_3_address0,
        ifm_bf_3_ce0,
        ifm_bf_3_we0,
        ifm_bf_3_d0,
        ich,
        ifm_ch,
        oh,
        ifm_h,
        ow,
        ifm_w,
        min_ifm_ch,
        min_ifm_h,
        min_ifm_w,
        IFM_FEATURE_MAPS,
        stride,
        pad,
        pad_value,
        enable
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ifm_AWVALID;
input   m_axi_ifm_AWREADY;
output  [31:0] m_axi_ifm_AWADDR;
output  [0:0] m_axi_ifm_AWID;
output  [31:0] m_axi_ifm_AWLEN;
output  [2:0] m_axi_ifm_AWSIZE;
output  [1:0] m_axi_ifm_AWBURST;
output  [1:0] m_axi_ifm_AWLOCK;
output  [3:0] m_axi_ifm_AWCACHE;
output  [2:0] m_axi_ifm_AWPROT;
output  [3:0] m_axi_ifm_AWQOS;
output  [3:0] m_axi_ifm_AWREGION;
output  [0:0] m_axi_ifm_AWUSER;
output   m_axi_ifm_WVALID;
input   m_axi_ifm_WREADY;
output  [15:0] m_axi_ifm_WDATA;
output  [1:0] m_axi_ifm_WSTRB;
output   m_axi_ifm_WLAST;
output  [0:0] m_axi_ifm_WID;
output  [0:0] m_axi_ifm_WUSER;
output   m_axi_ifm_ARVALID;
input   m_axi_ifm_ARREADY;
output  [31:0] m_axi_ifm_ARADDR;
output  [0:0] m_axi_ifm_ARID;
output  [31:0] m_axi_ifm_ARLEN;
output  [2:0] m_axi_ifm_ARSIZE;
output  [1:0] m_axi_ifm_ARBURST;
output  [1:0] m_axi_ifm_ARLOCK;
output  [3:0] m_axi_ifm_ARCACHE;
output  [2:0] m_axi_ifm_ARPROT;
output  [3:0] m_axi_ifm_ARQOS;
output  [3:0] m_axi_ifm_ARREGION;
output  [0:0] m_axi_ifm_ARUSER;
input   m_axi_ifm_RVALID;
output   m_axi_ifm_RREADY;
input  [15:0] m_axi_ifm_RDATA;
input   m_axi_ifm_RLAST;
input  [0:0] m_axi_ifm_RID;
input  [0:0] m_axi_ifm_RUSER;
input  [1:0] m_axi_ifm_RRESP;
input   m_axi_ifm_BVALID;
output   m_axi_ifm_BREADY;
input  [1:0] m_axi_ifm_BRESP;
input  [0:0] m_axi_ifm_BID;
input  [0:0] m_axi_ifm_BUSER;
input  [31:0] ifm_in;
output  [12:0] ifm_bf_0_address0;
output   ifm_bf_0_ce0;
output   ifm_bf_0_we0;
output  [15:0] ifm_bf_0_d0;
output  [12:0] ifm_bf_1_address0;
output   ifm_bf_1_ce0;
output   ifm_bf_1_we0;
output  [15:0] ifm_bf_1_d0;
output  [12:0] ifm_bf_2_address0;
output   ifm_bf_2_ce0;
output   ifm_bf_2_we0;
output  [15:0] ifm_bf_2_d0;
output  [12:0] ifm_bf_3_address0;
output   ifm_bf_3_ce0;
output   ifm_bf_3_we0;
output  [15:0] ifm_bf_3_d0;
input  [15:0] ich;
input  [15:0] ifm_ch;
input  [15:0] oh;
input  [15:0] ifm_h;
input  [15:0] ow;
input  [15:0] ifm_w;
input  [7:0] min_ifm_ch;
input  [7:0] min_ifm_h;
input  [7:0] min_ifm_w;
input  [30:0] IFM_FEATURE_MAPS;
input  [7:0] stride;
input  [7:0] pad;
input  [15:0] pad_value;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ifm_ARVALID;
reg m_axi_ifm_RREADY;
reg ifm_bf_0_ce0;
reg ifm_bf_0_we0;
reg ifm_bf_1_ce0;
reg ifm_bf_1_we0;
reg ifm_bf_2_ce0;
reg ifm_bf_2_we0;
reg ifm_bf_3_ce0;
reg ifm_bf_3_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] line_buffer0_1_address0;
reg    line_buffer0_1_ce0;
reg    line_buffer0_1_we0;
wire   [15:0] line_buffer0_1_q0;
reg   [6:0] line_buffer1_1_address0;
reg    line_buffer1_1_ce0;
reg    line_buffer1_1_we0;
wire   [15:0] line_buffer1_1_q0;
wire   [0:0] enable_read_read_fu_104_p2;
wire   [0:0] icmp_ln61_fu_334_p2;
reg   [0:0] icmp_ln61_reg_550;
wire   [15:0] zext_ln62_fu_340_p1;
wire   [30:0] grp_fu_344_p2;
reg   [30:0] mul_ln65_reg_561;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln62_1_fu_350_p1;
wire    ap_CS_fsm_state3;
wire  signed [15:0] grp_fu_455_p3;
reg   [15:0] h_offset_reg_572;
wire    ap_CS_fsm_state4;
wire  signed [15:0] grp_fu_464_p3;
reg   [15:0] w_offset_reg_577;
wire    ap_CS_fsm_state6;
wire   [0:0] ich_enable_fu_367_p2;
reg   [0:0] ich_enable_reg_598;
wire    ap_CS_fsm_state7;
wire   [31:0] inputs_fu_379_p2;
reg   [31:0] inputs_reg_603;
wire   [15:0] loop_cnts_fu_390_p2;
reg   [15:0] loop_cnts_reg_608;
wire   [15:0] add_ln71_fu_396_p2;
reg   [15:0] add_ln71_reg_613;
wire   [15:0] loop0_1_fu_402_p2;
reg   [15:0] loop0_1_reg_618;
wire    ap_CS_fsm_state8;
wire   [1:0] trunc_ln71_fu_408_p1;
reg   [1:0] trunc_ln71_reg_623;
wire   [0:0] cmp45_fu_417_p2;
reg   [0:0] cmp45_reg_631;
wire   [0:0] icmp_ln71_fu_412_p2;
wire   [0:0] grp_fu_324_p2;
reg   [0:0] icmp_ln78_reg_636;
wire   [0:0] ap_phi_mux_inputs_pp_phi_fu_258_p4;
reg   [0:0] icmp_ln74_reg_641;
wire   [7:0] ichh_fu_439_p3;
wire    ap_CS_fsm_state10;
wire   [7:0] hh_fu_447_p3;
wire    grp_load_pp0_fu_279_ap_start;
wire    grp_load_pp0_fu_279_ap_done;
wire    grp_load_pp0_fu_279_ap_idle;
wire    grp_load_pp0_fu_279_ap_ready;
wire    grp_load_pp0_fu_279_m_axi_ifm_AWVALID;
wire   [31:0] grp_load_pp0_fu_279_m_axi_ifm_AWADDR;
wire   [0:0] grp_load_pp0_fu_279_m_axi_ifm_AWID;
wire   [31:0] grp_load_pp0_fu_279_m_axi_ifm_AWLEN;
wire   [2:0] grp_load_pp0_fu_279_m_axi_ifm_AWSIZE;
wire   [1:0] grp_load_pp0_fu_279_m_axi_ifm_AWBURST;
wire   [1:0] grp_load_pp0_fu_279_m_axi_ifm_AWLOCK;
wire   [3:0] grp_load_pp0_fu_279_m_axi_ifm_AWCACHE;
wire   [2:0] grp_load_pp0_fu_279_m_axi_ifm_AWPROT;
wire   [3:0] grp_load_pp0_fu_279_m_axi_ifm_AWQOS;
wire   [3:0] grp_load_pp0_fu_279_m_axi_ifm_AWREGION;
wire   [0:0] grp_load_pp0_fu_279_m_axi_ifm_AWUSER;
wire    grp_load_pp0_fu_279_m_axi_ifm_WVALID;
wire   [15:0] grp_load_pp0_fu_279_m_axi_ifm_WDATA;
wire   [1:0] grp_load_pp0_fu_279_m_axi_ifm_WSTRB;
wire    grp_load_pp0_fu_279_m_axi_ifm_WLAST;
wire   [0:0] grp_load_pp0_fu_279_m_axi_ifm_WID;
wire   [0:0] grp_load_pp0_fu_279_m_axi_ifm_WUSER;
wire    grp_load_pp0_fu_279_m_axi_ifm_ARVALID;
wire   [31:0] grp_load_pp0_fu_279_m_axi_ifm_ARADDR;
wire   [0:0] grp_load_pp0_fu_279_m_axi_ifm_ARID;
wire   [31:0] grp_load_pp0_fu_279_m_axi_ifm_ARLEN;
wire   [2:0] grp_load_pp0_fu_279_m_axi_ifm_ARSIZE;
wire   [1:0] grp_load_pp0_fu_279_m_axi_ifm_ARBURST;
wire   [1:0] grp_load_pp0_fu_279_m_axi_ifm_ARLOCK;
wire   [3:0] grp_load_pp0_fu_279_m_axi_ifm_ARCACHE;
wire   [2:0] grp_load_pp0_fu_279_m_axi_ifm_ARPROT;
wire   [3:0] grp_load_pp0_fu_279_m_axi_ifm_ARQOS;
wire   [3:0] grp_load_pp0_fu_279_m_axi_ifm_ARREGION;
wire   [0:0] grp_load_pp0_fu_279_m_axi_ifm_ARUSER;
wire    grp_load_pp0_fu_279_m_axi_ifm_RREADY;
wire    grp_load_pp0_fu_279_m_axi_ifm_BREADY;
wire   [6:0] grp_load_pp0_fu_279_line_buffer_address0;
wire    grp_load_pp0_fu_279_line_buffer_ce0;
wire    grp_load_pp0_fu_279_line_buffer_we0;
wire   [15:0] grp_load_pp0_fu_279_line_buffer_d0;
wire    grp_load_pp0_fu_279_enable;
wire    grp_load_pp1_fu_297_ap_start;
wire    grp_load_pp1_fu_297_ap_done;
wire    grp_load_pp1_fu_297_ap_idle;
wire    grp_load_pp1_fu_297_ap_ready;
wire   [12:0] grp_load_pp1_fu_297_ibf_0_address0;
wire    grp_load_pp1_fu_297_ibf_0_ce0;
wire    grp_load_pp1_fu_297_ibf_0_we0;
wire   [15:0] grp_load_pp1_fu_297_ibf_0_d0;
wire   [12:0] grp_load_pp1_fu_297_ibf_1_address0;
wire    grp_load_pp1_fu_297_ibf_1_ce0;
wire    grp_load_pp1_fu_297_ibf_1_we0;
wire   [15:0] grp_load_pp1_fu_297_ibf_1_d0;
wire   [12:0] grp_load_pp1_fu_297_ibf_2_address0;
wire    grp_load_pp1_fu_297_ibf_2_ce0;
wire    grp_load_pp1_fu_297_ibf_2_we0;
wire   [15:0] grp_load_pp1_fu_297_ibf_2_d0;
wire   [12:0] grp_load_pp1_fu_297_ibf_3_address0;
wire    grp_load_pp1_fu_297_ibf_3_ce0;
wire    grp_load_pp1_fu_297_ibf_3_we0;
wire   [15:0] grp_load_pp1_fu_297_ibf_3_d0;
wire   [6:0] grp_load_pp1_fu_297_line_buffer_address0;
wire    grp_load_pp1_fu_297_line_buffer_ce0;
reg   [15:0] grp_load_pp1_fu_297_line_buffer_q0;
wire    grp_load_pp1_fu_297_ich_enable;
reg    grp_load_pp1_fu_297_enable;
reg   [15:0] loop0_reg_194;
reg   [0:0] inputs_pp_reg_254;
reg    ap_block_state10_on_subcall_done;
reg   [7:0] hh_3_reg_229;
reg   [7:0] hh_next_reg_205;
reg   [1:0] ichh_next_reg_217;
reg   [7:0] ichh_2_reg_242;
reg   [0:0] ap_phi_mux_inputs_pp_1_phi_fu_270_p4;
reg    grp_load_pp0_fu_279_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg    grp_load_pp1_fu_297_ap_start_reg;
wire   [15:0] grp_fu_344_p0;
wire  signed [30:0] sext_ln65_1_fu_359_p1;
wire  signed [30:0] grp_fu_472_p3;
wire   [31:0] shl_ln_fu_372_p3;
wire   [7:0] loop_cnts_fu_390_p0;
wire   [7:0] loop_cnts_fu_390_p1;
wire   [7:0] hh_2_fu_422_p2;
wire   [0:0] icmp_ln84_fu_428_p2;
wire   [7:0] add_ln85_fu_433_p2;
wire   [7:0] grp_fu_455_p0;
wire   [7:0] grp_fu_455_p2;
wire   [7:0] grp_fu_464_p0;
wire   [7:0] grp_fu_464_p2;
wire   [15:0] grp_fu_472_p1;
wire   [30:0] grp_fu_472_p2;
reg   [10:0] ap_NS_fsm;
wire   [30:0] grp_fu_344_p00;
wire   [30:0] grp_fu_472_p10;
wire   [15:0] loop_cnts_fu_390_p00;
wire   [15:0] loop_cnts_fu_390_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_load_pp0_fu_279_ap_start_reg = 1'b0;
#0 grp_load_pp1_fu_297_ap_start_reg = 1'b0;
end

top_load_inputs_line_buffer0_1 #(
    .DataWidth( 16 ),
    .AddressRange( 81 ),
    .AddressWidth( 7 ))
line_buffer0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer0_1_address0),
    .ce0(line_buffer0_1_ce0),
    .we0(line_buffer0_1_we0),
    .d0(grp_load_pp0_fu_279_line_buffer_d0),
    .q0(line_buffer0_1_q0)
);

top_load_inputs_line_buffer0_1 #(
    .DataWidth( 16 ),
    .AddressRange( 81 ),
    .AddressWidth( 7 ))
line_buffer1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer1_1_address0),
    .ce0(line_buffer1_1_ce0),
    .we0(line_buffer1_1_we0),
    .d0(grp_load_pp0_fu_279_line_buffer_d0),
    .q0(line_buffer1_1_q0)
);

top_load_pp0 grp_load_pp0_fu_279(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_pp0_fu_279_ap_start),
    .ap_done(grp_load_pp0_fu_279_ap_done),
    .ap_idle(grp_load_pp0_fu_279_ap_idle),
    .ap_ready(grp_load_pp0_fu_279_ap_ready),
    .m_axi_ifm_AWVALID(grp_load_pp0_fu_279_m_axi_ifm_AWVALID),
    .m_axi_ifm_AWREADY(1'b0),
    .m_axi_ifm_AWADDR(grp_load_pp0_fu_279_m_axi_ifm_AWADDR),
    .m_axi_ifm_AWID(grp_load_pp0_fu_279_m_axi_ifm_AWID),
    .m_axi_ifm_AWLEN(grp_load_pp0_fu_279_m_axi_ifm_AWLEN),
    .m_axi_ifm_AWSIZE(grp_load_pp0_fu_279_m_axi_ifm_AWSIZE),
    .m_axi_ifm_AWBURST(grp_load_pp0_fu_279_m_axi_ifm_AWBURST),
    .m_axi_ifm_AWLOCK(grp_load_pp0_fu_279_m_axi_ifm_AWLOCK),
    .m_axi_ifm_AWCACHE(grp_load_pp0_fu_279_m_axi_ifm_AWCACHE),
    .m_axi_ifm_AWPROT(grp_load_pp0_fu_279_m_axi_ifm_AWPROT),
    .m_axi_ifm_AWQOS(grp_load_pp0_fu_279_m_axi_ifm_AWQOS),
    .m_axi_ifm_AWREGION(grp_load_pp0_fu_279_m_axi_ifm_AWREGION),
    .m_axi_ifm_AWUSER(grp_load_pp0_fu_279_m_axi_ifm_AWUSER),
    .m_axi_ifm_WVALID(grp_load_pp0_fu_279_m_axi_ifm_WVALID),
    .m_axi_ifm_WREADY(1'b0),
    .m_axi_ifm_WDATA(grp_load_pp0_fu_279_m_axi_ifm_WDATA),
    .m_axi_ifm_WSTRB(grp_load_pp0_fu_279_m_axi_ifm_WSTRB),
    .m_axi_ifm_WLAST(grp_load_pp0_fu_279_m_axi_ifm_WLAST),
    .m_axi_ifm_WID(grp_load_pp0_fu_279_m_axi_ifm_WID),
    .m_axi_ifm_WUSER(grp_load_pp0_fu_279_m_axi_ifm_WUSER),
    .m_axi_ifm_ARVALID(grp_load_pp0_fu_279_m_axi_ifm_ARVALID),
    .m_axi_ifm_ARREADY(m_axi_ifm_ARREADY),
    .m_axi_ifm_ARADDR(grp_load_pp0_fu_279_m_axi_ifm_ARADDR),
    .m_axi_ifm_ARID(grp_load_pp0_fu_279_m_axi_ifm_ARID),
    .m_axi_ifm_ARLEN(grp_load_pp0_fu_279_m_axi_ifm_ARLEN),
    .m_axi_ifm_ARSIZE(grp_load_pp0_fu_279_m_axi_ifm_ARSIZE),
    .m_axi_ifm_ARBURST(grp_load_pp0_fu_279_m_axi_ifm_ARBURST),
    .m_axi_ifm_ARLOCK(grp_load_pp0_fu_279_m_axi_ifm_ARLOCK),
    .m_axi_ifm_ARCACHE(grp_load_pp0_fu_279_m_axi_ifm_ARCACHE),
    .m_axi_ifm_ARPROT(grp_load_pp0_fu_279_m_axi_ifm_ARPROT),
    .m_axi_ifm_ARQOS(grp_load_pp0_fu_279_m_axi_ifm_ARQOS),
    .m_axi_ifm_ARREGION(grp_load_pp0_fu_279_m_axi_ifm_ARREGION),
    .m_axi_ifm_ARUSER(grp_load_pp0_fu_279_m_axi_ifm_ARUSER),
    .m_axi_ifm_RVALID(m_axi_ifm_RVALID),
    .m_axi_ifm_RREADY(grp_load_pp0_fu_279_m_axi_ifm_RREADY),
    .m_axi_ifm_RDATA(m_axi_ifm_RDATA),
    .m_axi_ifm_RLAST(m_axi_ifm_RLAST),
    .m_axi_ifm_RID(m_axi_ifm_RID),
    .m_axi_ifm_RUSER(m_axi_ifm_RUSER),
    .m_axi_ifm_RRESP(m_axi_ifm_RRESP),
    .m_axi_ifm_BVALID(1'b0),
    .m_axi_ifm_BREADY(grp_load_pp0_fu_279_m_axi_ifm_BREADY),
    .m_axi_ifm_BRESP(2'd0),
    .m_axi_ifm_BID(1'd0),
    .m_axi_ifm_BUSER(1'd0),
    .inputs(inputs_reg_603),
    .line_buffer_address0(grp_load_pp0_fu_279_line_buffer_address0),
    .line_buffer_ce0(grp_load_pp0_fu_279_line_buffer_ce0),
    .line_buffer_we0(grp_load_pp0_fu_279_line_buffer_we0),
    .line_buffer_d0(grp_load_pp0_fu_279_line_buffer_d0),
    .ichh(ichh_2_reg_242),
    .hh(hh_3_reg_229),
    .ifm_h(ifm_h),
    .ifm_w(ifm_w),
    .min_ifm_w(min_ifm_w),
    .enable(grp_load_pp0_fu_279_enable)
);

top_load_pp1 grp_load_pp1_fu_297(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_pp1_fu_297_ap_start),
    .ap_done(grp_load_pp1_fu_297_ap_done),
    .ap_idle(grp_load_pp1_fu_297_ap_idle),
    .ap_ready(grp_load_pp1_fu_297_ap_ready),
    .ibf_0_address0(grp_load_pp1_fu_297_ibf_0_address0),
    .ibf_0_ce0(grp_load_pp1_fu_297_ibf_0_ce0),
    .ibf_0_we0(grp_load_pp1_fu_297_ibf_0_we0),
    .ibf_0_d0(grp_load_pp1_fu_297_ibf_0_d0),
    .ibf_1_address0(grp_load_pp1_fu_297_ibf_1_address0),
    .ibf_1_ce0(grp_load_pp1_fu_297_ibf_1_ce0),
    .ibf_1_we0(grp_load_pp1_fu_297_ibf_1_we0),
    .ibf_1_d0(grp_load_pp1_fu_297_ibf_1_d0),
    .ibf_2_address0(grp_load_pp1_fu_297_ibf_2_address0),
    .ibf_2_ce0(grp_load_pp1_fu_297_ibf_2_ce0),
    .ibf_2_we0(grp_load_pp1_fu_297_ibf_2_we0),
    .ibf_2_d0(grp_load_pp1_fu_297_ibf_2_d0),
    .ibf_3_address0(grp_load_pp1_fu_297_ibf_3_address0),
    .ibf_3_ce0(grp_load_pp1_fu_297_ibf_3_ce0),
    .ibf_3_we0(grp_load_pp1_fu_297_ibf_3_we0),
    .ibf_3_d0(grp_load_pp1_fu_297_ibf_3_d0),
    .line_buffer_address0(grp_load_pp1_fu_297_line_buffer_address0),
    .line_buffer_ce0(grp_load_pp1_fu_297_line_buffer_ce0),
    .line_buffer_q0(grp_load_pp1_fu_297_line_buffer_q0),
    .ichh(ichh_next_reg_217),
    .hh(hh_next_reg_205),
    .min_ifm_w(min_ifm_w),
    .ifm_h(ifm_h),
    .ifm_w(ifm_w),
    .h_offset(h_offset_reg_572),
    .w_offset(w_offset_reg_577),
    .ich_enable(grp_load_pp1_fu_297_ich_enable),
    .pad_value(pad_value),
    .enable(grp_load_pp1_fu_297_enable)
);

top_mul_16ns_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_16ns_31s_31_2_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_344_p0),
    .din1(IFM_FEATURE_MAPS),
    .ce(1'b1),
    .dout(grp_fu_344_p2)
);

top_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U32(
    .din0(loop_cnts_fu_390_p0),
    .din1(loop_cnts_fu_390_p1),
    .dout(loop_cnts_fu_390_p2)
);

top_mac_mul_sub_8ns_16s_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mac_mul_sub_8ns_16s_8ns_16_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_455_p0),
    .din1(oh),
    .din2(grp_fu_455_p2),
    .ce(1'b1),
    .dout(grp_fu_455_p3)
);

top_mac_mul_sub_8ns_16s_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mac_mul_sub_8ns_16s_8ns_16_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .din1(ow),
    .din2(grp_fu_464_p2),
    .ce(1'b1),
    .dout(grp_fu_464_p3)
);

top_mac_muladd_16s_16ns_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16ns_31ns_31_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_455_p3),
    .din1(grp_fu_472_p1),
    .din2(grp_fu_472_p2),
    .ce(1'b1),
    .dout(grp_fu_472_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_pp0_fu_279_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
            grp_load_pp0_fu_279_ap_start_reg <= 1'b1;
        end else if ((grp_load_pp0_fu_279_ap_ready == 1'b1)) begin
            grp_load_pp0_fu_279_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_pp1_fu_297_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
            grp_load_pp1_fu_297_ap_start_reg <= 1'b1;
        end else if ((grp_load_pp1_fu_297_ap_ready == 1'b1)) begin
            grp_load_pp1_fu_297_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        hh_3_reg_229 <= 8'd0;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        hh_3_reg_229 <= hh_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        hh_next_reg_205 <= 8'd0;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        hh_next_reg_205 <= hh_3_reg_229;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ichh_2_reg_242 <= 8'd0;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        ichh_2_reg_242 <= ichh_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ichh_next_reg_217 <= 2'd0;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        ichh_next_reg_217 <= trunc_ln71_reg_623;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        inputs_pp_reg_254 <= 1'd0;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        inputs_pp_reg_254 <= ap_phi_mux_inputs_pp_1_phi_fu_270_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        loop0_reg_194 <= 16'd0;
    end else if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        loop0_reg_194 <= loop0_1_reg_618;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln71_reg_613 <= add_ln71_fu_396_p2;
        ich_enable_reg_598 <= ich_enable_fu_367_p2;
        inputs_reg_603 <= inputs_fu_379_p2;
        loop_cnts_reg_608 <= loop_cnts_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (enable_read_read_fu_104_p2 == 1'd1))) begin
        cmp45_reg_631 <= cmp45_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        h_offset_reg_572 <= grp_fu_455_p3;
        w_offset_reg_577 <= grp_fu_464_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_104_p2 == 1'd1))) begin
        icmp_ln61_reg_550 <= icmp_ln61_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_inputs_pp_phi_fu_258_p4 == 1'd1) & (icmp_ln71_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (enable_read_read_fu_104_p2 == 1'd1))) begin
        icmp_ln74_reg_641 <= grp_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_inputs_pp_phi_fu_258_p4 == 1'd0) & (icmp_ln71_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (enable_read_read_fu_104_p2 == 1'd1))) begin
        icmp_ln78_reg_636 <= grp_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (enable_read_read_fu_104_p2 == 1'd1))) begin
        loop0_1_reg_618 <= loop0_1_fu_402_p2;
        trunc_ln71_reg_623 <= trunc_ln71_fu_408_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln65_reg_561 <= grp_fu_344_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state8) & ((icmp_ln71_fu_412_p2 == 1'd1) | (enable_read_read_fu_104_p2 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd0)) begin
            ap_phi_mux_inputs_pp_1_phi_fu_270_p4 = 1'd1;
        end else if ((inputs_pp_reg_254 == 1'd1)) begin
            ap_phi_mux_inputs_pp_1_phi_fu_270_p4 = 1'd0;
        end else begin
            ap_phi_mux_inputs_pp_1_phi_fu_270_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_inputs_pp_1_phi_fu_270_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln71_fu_412_p2 == 1'd1) | (enable_read_read_fu_104_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd1)) begin
            grp_load_pp1_fu_297_enable = icmp_ln74_reg_641;
        end else if ((inputs_pp_reg_254 == 1'd0)) begin
            grp_load_pp1_fu_297_enable = icmp_ln78_reg_636;
        end else begin
            grp_load_pp1_fu_297_enable = 'bx;
        end
    end else begin
        grp_load_pp1_fu_297_enable = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd1)) begin
            grp_load_pp1_fu_297_line_buffer_q0 = line_buffer1_1_q0;
        end else if ((inputs_pp_reg_254 == 1'd0)) begin
            grp_load_pp1_fu_297_line_buffer_q0 = line_buffer0_1_q0;
        end else begin
            grp_load_pp1_fu_297_line_buffer_q0 = 'bx;
        end
    end else begin
        grp_load_pp1_fu_297_line_buffer_q0 = 'bx;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_0_ce0 = grp_load_pp1_fu_297_ibf_0_ce0;
    end else begin
        ifm_bf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_0_we0 = grp_load_pp1_fu_297_ibf_0_we0;
    end else begin
        ifm_bf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_1_ce0 = grp_load_pp1_fu_297_ibf_1_ce0;
    end else begin
        ifm_bf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_1_we0 = grp_load_pp1_fu_297_ibf_1_we0;
    end else begin
        ifm_bf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_2_ce0 = grp_load_pp1_fu_297_ibf_2_ce0;
    end else begin
        ifm_bf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_2_we0 = grp_load_pp1_fu_297_ibf_2_we0;
    end else begin
        ifm_bf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_3_ce0 = grp_load_pp1_fu_297_ibf_3_ce0;
    end else begin
        ifm_bf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        ifm_bf_3_we0 = grp_load_pp1_fu_297_ibf_3_we0;
    end else begin
        ifm_bf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd0)) begin
            line_buffer0_1_address0 = grp_load_pp1_fu_297_line_buffer_address0;
        end else if ((inputs_pp_reg_254 == 1'd1)) begin
            line_buffer0_1_address0 = grp_load_pp0_fu_279_line_buffer_address0;
        end else begin
            line_buffer0_1_address0 = 'bx;
        end
    end else begin
        line_buffer0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd0)) begin
            line_buffer0_1_ce0 = grp_load_pp1_fu_297_line_buffer_ce0;
        end else if ((inputs_pp_reg_254 == 1'd1)) begin
            line_buffer0_1_ce0 = grp_load_pp0_fu_279_line_buffer_ce0;
        end else begin
            line_buffer0_1_ce0 = 1'b0;
        end
    end else begin
        line_buffer0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        line_buffer0_1_we0 = grp_load_pp0_fu_279_line_buffer_we0;
    end else begin
        line_buffer0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd1)) begin
            line_buffer1_1_address0 = grp_load_pp1_fu_297_line_buffer_address0;
        end else if ((inputs_pp_reg_254 == 1'd0)) begin
            line_buffer1_1_address0 = grp_load_pp0_fu_279_line_buffer_address0;
        end else begin
            line_buffer1_1_address0 = 'bx;
        end
    end else begin
        line_buffer1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((inputs_pp_reg_254 == 1'd1)) begin
            line_buffer1_1_ce0 = grp_load_pp1_fu_297_line_buffer_ce0;
        end else if ((inputs_pp_reg_254 == 1'd0)) begin
            line_buffer1_1_ce0 = grp_load_pp0_fu_279_line_buffer_ce0;
        end else begin
            line_buffer1_1_ce0 = 1'b0;
        end
    end else begin
        line_buffer1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        line_buffer1_1_we0 = grp_load_pp0_fu_279_line_buffer_we0;
    end else begin
        line_buffer1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_ifm_ARVALID = grp_load_pp0_fu_279_m_axi_ifm_ARVALID;
    end else begin
        m_axi_ifm_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((inputs_pp_reg_254 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((inputs_pp_reg_254 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_ifm_RREADY = grp_load_pp0_fu_279_m_axi_ifm_RREADY;
    end else begin
        m_axi_ifm_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_104_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_104_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln71_fu_412_p2 == 1'd1) | (enable_read_read_fu_104_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_phi_mux_inputs_pp_phi_fu_258_p4 == 1'd1) & (icmp_ln71_fu_412_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (enable_read_read_fu_104_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_fu_396_p2 = (loop_cnts_fu_390_p2 + 16'd1);

assign add_ln85_fu_433_p2 = (ichh_2_reg_242 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = (((inputs_pp_reg_254 == 1'd1) & (grp_load_pp1_fu_297_ap_done == 1'b0)) | ((inputs_pp_reg_254 == 1'd1) & (grp_load_pp0_fu_279_ap_done == 1'b0)) | ((inputs_pp_reg_254 == 1'd0) & (grp_load_pp1_fu_297_ap_done == 1'b0)) | ((inputs_pp_reg_254 == 1'd0) & (grp_load_pp0_fu_279_ap_done == 1'b0)));
end

assign ap_phi_mux_inputs_pp_phi_fu_258_p4 = inputs_pp_reg_254;

assign cmp45_fu_417_p2 = ((loop0_reg_194 < loop_cnts_reg_608) ? 1'b1 : 1'b0);

assign enable_read_read_fu_104_p2 = enable;

assign grp_fu_324_p2 = ((loop0_reg_194 != 16'd0) ? 1'b1 : 1'b0);

assign grp_fu_344_p0 = grp_fu_344_p00;

assign grp_fu_344_p00 = ich;

assign grp_fu_455_p0 = zext_ln62_fu_340_p1;

assign grp_fu_455_p2 = zext_ln62_1_fu_350_p1;

assign grp_fu_464_p0 = zext_ln62_fu_340_p1;

assign grp_fu_464_p2 = zext_ln62_1_fu_350_p1;

assign grp_fu_472_p1 = grp_fu_472_p10;

assign grp_fu_472_p10 = ifm_w;

assign grp_fu_472_p2 = ($signed(mul_ln65_reg_561) + $signed(sext_ln65_1_fu_359_p1));

assign grp_load_pp0_fu_279_ap_start = grp_load_pp0_fu_279_ap_start_reg;

assign grp_load_pp0_fu_279_enable = cmp45_reg_631;

assign grp_load_pp1_fu_297_ap_start = grp_load_pp1_fu_297_ap_start_reg;

assign grp_load_pp1_fu_297_ich_enable = ich_enable_reg_598;

assign hh_2_fu_422_p2 = (hh_3_reg_229 + 8'd1);

assign hh_fu_447_p3 = ((icmp_ln84_fu_428_p2[0:0] == 1'b1) ? 8'd0 : hh_2_fu_422_p2);

assign ich_enable_fu_367_p2 = (icmp_ln61_reg_550 ^ 1'd1);

assign ichh_fu_439_p3 = ((icmp_ln84_fu_428_p2[0:0] == 1'b1) ? add_ln85_fu_433_p2 : ichh_2_reg_242);

assign icmp_ln61_fu_334_p2 = ((ich < ifm_ch) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_412_p2 = ((loop0_reg_194 == add_ln71_reg_613) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_428_p2 = ((hh_2_fu_422_p2 == min_ifm_h) ? 1'b1 : 1'b0);

assign ifm_bf_0_address0 = grp_load_pp1_fu_297_ibf_0_address0;

assign ifm_bf_0_d0 = grp_load_pp1_fu_297_ibf_0_d0;

assign ifm_bf_1_address0 = grp_load_pp1_fu_297_ibf_1_address0;

assign ifm_bf_1_d0 = grp_load_pp1_fu_297_ibf_1_d0;

assign ifm_bf_2_address0 = grp_load_pp1_fu_297_ibf_2_address0;

assign ifm_bf_2_d0 = grp_load_pp1_fu_297_ibf_2_d0;

assign ifm_bf_3_address0 = grp_load_pp1_fu_297_ibf_3_address0;

assign ifm_bf_3_d0 = grp_load_pp1_fu_297_ibf_3_d0;

assign inputs_fu_379_p2 = (shl_ln_fu_372_p3 + ifm_in);

assign loop0_1_fu_402_p2 = (loop0_reg_194 + 16'd1);

assign loop_cnts_fu_390_p0 = loop_cnts_fu_390_p00;

assign loop_cnts_fu_390_p00 = min_ifm_h;

assign loop_cnts_fu_390_p1 = loop_cnts_fu_390_p10;

assign loop_cnts_fu_390_p10 = min_ifm_ch;

assign m_axi_ifm_ARADDR = grp_load_pp0_fu_279_m_axi_ifm_ARADDR;

assign m_axi_ifm_ARBURST = grp_load_pp0_fu_279_m_axi_ifm_ARBURST;

assign m_axi_ifm_ARCACHE = grp_load_pp0_fu_279_m_axi_ifm_ARCACHE;

assign m_axi_ifm_ARID = grp_load_pp0_fu_279_m_axi_ifm_ARID;

assign m_axi_ifm_ARLEN = grp_load_pp0_fu_279_m_axi_ifm_ARLEN;

assign m_axi_ifm_ARLOCK = grp_load_pp0_fu_279_m_axi_ifm_ARLOCK;

assign m_axi_ifm_ARPROT = grp_load_pp0_fu_279_m_axi_ifm_ARPROT;

assign m_axi_ifm_ARQOS = grp_load_pp0_fu_279_m_axi_ifm_ARQOS;

assign m_axi_ifm_ARREGION = grp_load_pp0_fu_279_m_axi_ifm_ARREGION;

assign m_axi_ifm_ARSIZE = grp_load_pp0_fu_279_m_axi_ifm_ARSIZE;

assign m_axi_ifm_ARUSER = grp_load_pp0_fu_279_m_axi_ifm_ARUSER;

assign m_axi_ifm_AWADDR = 32'd0;

assign m_axi_ifm_AWBURST = 2'd0;

assign m_axi_ifm_AWCACHE = 4'd0;

assign m_axi_ifm_AWID = 1'd0;

assign m_axi_ifm_AWLEN = 32'd0;

assign m_axi_ifm_AWLOCK = 2'd0;

assign m_axi_ifm_AWPROT = 3'd0;

assign m_axi_ifm_AWQOS = 4'd0;

assign m_axi_ifm_AWREGION = 4'd0;

assign m_axi_ifm_AWSIZE = 3'd0;

assign m_axi_ifm_AWUSER = 1'd0;

assign m_axi_ifm_AWVALID = 1'b0;

assign m_axi_ifm_BREADY = 1'b0;

assign m_axi_ifm_WDATA = 16'd0;

assign m_axi_ifm_WID = 1'd0;

assign m_axi_ifm_WLAST = 1'b0;

assign m_axi_ifm_WSTRB = 2'd0;

assign m_axi_ifm_WUSER = 1'd0;

assign m_axi_ifm_WVALID = 1'b0;

assign sext_ln65_1_fu_359_p1 = $signed(w_offset_reg_577);

assign shl_ln_fu_372_p3 = {{grp_fu_472_p3}, {1'd0}};

assign trunc_ln71_fu_408_p1 = ichh_2_reg_242[1:0];

assign zext_ln62_1_fu_350_p1 = pad;

assign zext_ln62_fu_340_p1 = stride;

endmodule //top_load_inputs
