// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_load_pp0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ifm_AWVALID,
        m_axi_ifm_AWREADY,
        m_axi_ifm_AWADDR,
        m_axi_ifm_AWID,
        m_axi_ifm_AWLEN,
        m_axi_ifm_AWSIZE,
        m_axi_ifm_AWBURST,
        m_axi_ifm_AWLOCK,
        m_axi_ifm_AWCACHE,
        m_axi_ifm_AWPROT,
        m_axi_ifm_AWQOS,
        m_axi_ifm_AWREGION,
        m_axi_ifm_AWUSER,
        m_axi_ifm_WVALID,
        m_axi_ifm_WREADY,
        m_axi_ifm_WDATA,
        m_axi_ifm_WSTRB,
        m_axi_ifm_WLAST,
        m_axi_ifm_WID,
        m_axi_ifm_WUSER,
        m_axi_ifm_ARVALID,
        m_axi_ifm_ARREADY,
        m_axi_ifm_ARADDR,
        m_axi_ifm_ARID,
        m_axi_ifm_ARLEN,
        m_axi_ifm_ARSIZE,
        m_axi_ifm_ARBURST,
        m_axi_ifm_ARLOCK,
        m_axi_ifm_ARCACHE,
        m_axi_ifm_ARPROT,
        m_axi_ifm_ARQOS,
        m_axi_ifm_ARREGION,
        m_axi_ifm_ARUSER,
        m_axi_ifm_RVALID,
        m_axi_ifm_RREADY,
        m_axi_ifm_RDATA,
        m_axi_ifm_RLAST,
        m_axi_ifm_RID,
        m_axi_ifm_RUSER,
        m_axi_ifm_RRESP,
        m_axi_ifm_BVALID,
        m_axi_ifm_BREADY,
        m_axi_ifm_BRESP,
        m_axi_ifm_BID,
        m_axi_ifm_BUSER,
        inputs,
        line_buffer_address0,
        line_buffer_ce0,
        line_buffer_we0,
        line_buffer_d0,
        ichh,
        hh,
        ifm_h,
        ifm_w,
        min_ifm_w,
        enable
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 16'd16384;
parameter    ap_ST_fsm_state18 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ifm_AWVALID;
input   m_axi_ifm_AWREADY;
output  [31:0] m_axi_ifm_AWADDR;
output  [0:0] m_axi_ifm_AWID;
output  [31:0] m_axi_ifm_AWLEN;
output  [2:0] m_axi_ifm_AWSIZE;
output  [1:0] m_axi_ifm_AWBURST;
output  [1:0] m_axi_ifm_AWLOCK;
output  [3:0] m_axi_ifm_AWCACHE;
output  [2:0] m_axi_ifm_AWPROT;
output  [3:0] m_axi_ifm_AWQOS;
output  [3:0] m_axi_ifm_AWREGION;
output  [0:0] m_axi_ifm_AWUSER;
output   m_axi_ifm_WVALID;
input   m_axi_ifm_WREADY;
output  [15:0] m_axi_ifm_WDATA;
output  [1:0] m_axi_ifm_WSTRB;
output   m_axi_ifm_WLAST;
output  [0:0] m_axi_ifm_WID;
output  [0:0] m_axi_ifm_WUSER;
output   m_axi_ifm_ARVALID;
input   m_axi_ifm_ARREADY;
output  [31:0] m_axi_ifm_ARADDR;
output  [0:0] m_axi_ifm_ARID;
output  [31:0] m_axi_ifm_ARLEN;
output  [2:0] m_axi_ifm_ARSIZE;
output  [1:0] m_axi_ifm_ARBURST;
output  [1:0] m_axi_ifm_ARLOCK;
output  [3:0] m_axi_ifm_ARCACHE;
output  [2:0] m_axi_ifm_ARPROT;
output  [3:0] m_axi_ifm_ARQOS;
output  [3:0] m_axi_ifm_ARREGION;
output  [0:0] m_axi_ifm_ARUSER;
input   m_axi_ifm_RVALID;
output   m_axi_ifm_RREADY;
input  [15:0] m_axi_ifm_RDATA;
input   m_axi_ifm_RLAST;
input  [0:0] m_axi_ifm_RID;
input  [0:0] m_axi_ifm_RUSER;
input  [1:0] m_axi_ifm_RRESP;
input   m_axi_ifm_BVALID;
output   m_axi_ifm_BREADY;
input  [1:0] m_axi_ifm_BRESP;
input  [0:0] m_axi_ifm_BID;
input  [0:0] m_axi_ifm_BUSER;
input  [31:0] inputs;
output  [6:0] line_buffer_address0;
output   line_buffer_ce0;
output   line_buffer_we0;
output  [15:0] line_buffer_d0;
input  [7:0] ichh;
input  [7:0] hh;
input  [15:0] ifm_h;
input  [15:0] ifm_w;
input  [7:0] min_ifm_w;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ifm_ARVALID;
reg m_axi_ifm_RREADY;
reg line_buffer_ce0;
reg line_buffer_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ifm_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    ifm_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond3_reg_305;
reg   [7:0] loop_index_reg_140;
wire   [0:0] enable_read_read_fu_74_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [31:0] ifm_addr_reg_289;
wire    ap_CS_fsm_state7;
wire   [7:0] empty_87_fu_204_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state15_pp0_stage0_iter0;
reg    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond3_fu_210_p2;
reg   [0:0] exitcond3_reg_305_pp0_iter1_reg;
wire   [6:0] empty_89_fu_215_p1;
reg   [6:0] empty_89_reg_309;
reg   [6:0] empty_89_reg_309_pp0_iter1_reg;
reg   [15:0] ifm_addr_read_reg_314;
wire    ap_CS_fsm_state14;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] loop_index_cast_cast_fu_219_p1;
wire  signed [31:0] p_cast_cast_fu_190_p1;
wire   [23:0] grp_fu_223_p3;
wire   [30:0] grp_fu_232_p2;
wire   [31:0] tmp_fu_168_p3;
wire   [31:0] empty_85_fu_175_p2;
wire   [30:0] p_cast_fu_180_p4;
wire   [15:0] grp_fu_223_p0;
wire   [7:0] grp_fu_223_p1;
wire   [7:0] grp_fu_223_p2;
wire   [23:0] grp_fu_232_p0;
wire   [15:0] grp_fu_232_p1;
wire    ap_CS_fsm_state18;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] grp_fu_223_p00;
wire   [23:0] grp_fu_223_p10;
wire   [23:0] grp_fu_223_p20;
wire   [30:0] grp_fu_232_p00;
wire   [30:0] grp_fu_232_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

top_mac_muladd_16ns_8ns_8ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mac_muladd_16ns_8ns_8ns_24_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .din2(grp_fu_223_p2),
    .ce(1'b1),
    .dout(grp_fu_223_p3)
);

top_mul_mul_24ns_16ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_mul_24ns_16ns_31_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_232_p0),
    .din1(grp_fu_232_p1),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        loop_index_reg_140 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_fu_210_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index_reg_140 <= empty_87_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_fu_210_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_89_reg_309 <= empty_89_fu_215_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_89_reg_309_pp0_iter1_reg <= empty_89_reg_309;
        exitcond3_reg_305 <= exitcond3_fu_210_p2;
        exitcond3_reg_305_pp0_iter1_reg <= exitcond3_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ifm_addr_read_reg_314 <= m_axi_ifm_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ifm_addr_reg_289 <= p_cast_cast_fu_190_p1;
    end
end

always @ (*) begin
    if ((exitcond3_fu_210_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ifm_blk_n_AR = m_axi_ifm_ARREADY;
    end else begin
        ifm_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ifm_blk_n_R = m_axi_ifm_RVALID;
    end else begin
        ifm_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond3_reg_305_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_we0 = 1'b1;
    end else begin
        line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ifm_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_ifm_ARVALID = 1'b1;
    end else begin
        m_axi_ifm_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_ifm_RREADY = 1'b1;
    end else begin
        m_axi_ifm_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_74_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_ifm_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond3_fu_210_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond3_fu_210_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_ifm_RVALID == 1'b0) & (exitcond3_reg_305 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_ifm_RVALID == 1'b0) & (exitcond3_reg_305 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter1 = ((m_axi_ifm_RVALID == 1'b0) & (exitcond3_reg_305 == 1'd0));
end

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_85_fu_175_p2 = (tmp_fu_168_p3 + inputs);

assign empty_87_fu_204_p2 = (loop_index_reg_140 + 8'd1);

assign empty_89_fu_215_p1 = loop_index_reg_140[6:0];

assign enable_read_read_fu_74_p2 = enable;

assign exitcond3_fu_210_p2 = ((loop_index_reg_140 == min_ifm_w) ? 1'b1 : 1'b0);

assign grp_fu_223_p0 = grp_fu_223_p00;

assign grp_fu_223_p00 = ifm_h;

assign grp_fu_223_p1 = grp_fu_223_p10;

assign grp_fu_223_p10 = ichh;

assign grp_fu_223_p2 = grp_fu_223_p20;

assign grp_fu_223_p20 = hh;

assign grp_fu_232_p0 = grp_fu_232_p00;

assign grp_fu_232_p00 = grp_fu_223_p3;

assign grp_fu_232_p1 = grp_fu_232_p10;

assign grp_fu_232_p10 = ifm_w;

assign line_buffer_address0 = loop_index_cast_cast_fu_219_p1;

assign line_buffer_d0 = ifm_addr_read_reg_314;

assign loop_index_cast_cast_fu_219_p1 = empty_89_reg_309_pp0_iter1_reg;

assign m_axi_ifm_ARADDR = ifm_addr_reg_289;

assign m_axi_ifm_ARBURST = 2'd0;

assign m_axi_ifm_ARCACHE = 4'd0;

assign m_axi_ifm_ARID = 1'd0;

assign m_axi_ifm_ARLEN = min_ifm_w;

assign m_axi_ifm_ARLOCK = 2'd0;

assign m_axi_ifm_ARPROT = 3'd0;

assign m_axi_ifm_ARQOS = 4'd0;

assign m_axi_ifm_ARREGION = 4'd0;

assign m_axi_ifm_ARSIZE = 3'd0;

assign m_axi_ifm_ARUSER = 1'd0;

assign m_axi_ifm_AWADDR = 32'd0;

assign m_axi_ifm_AWBURST = 2'd0;

assign m_axi_ifm_AWCACHE = 4'd0;

assign m_axi_ifm_AWID = 1'd0;

assign m_axi_ifm_AWLEN = 32'd0;

assign m_axi_ifm_AWLOCK = 2'd0;

assign m_axi_ifm_AWPROT = 3'd0;

assign m_axi_ifm_AWQOS = 4'd0;

assign m_axi_ifm_AWREGION = 4'd0;

assign m_axi_ifm_AWSIZE = 3'd0;

assign m_axi_ifm_AWUSER = 1'd0;

assign m_axi_ifm_AWVALID = 1'b0;

assign m_axi_ifm_BREADY = 1'b0;

assign m_axi_ifm_WDATA = 16'd0;

assign m_axi_ifm_WID = 1'd0;

assign m_axi_ifm_WLAST = 1'b0;

assign m_axi_ifm_WSTRB = 2'd0;

assign m_axi_ifm_WUSER = 1'd0;

assign m_axi_ifm_WVALID = 1'b0;

assign p_cast_cast_fu_190_p1 = $signed(p_cast_fu_180_p4);

assign p_cast_fu_180_p4 = {{empty_85_fu_175_p2[31:1]}};

assign tmp_fu_168_p3 = {{grp_fu_232_p2}, {1'd0}};

endmodule //top_load_pp0
