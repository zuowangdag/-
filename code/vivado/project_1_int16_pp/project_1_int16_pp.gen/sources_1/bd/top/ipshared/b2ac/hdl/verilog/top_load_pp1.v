// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_load_pp1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ibf_0_address0,
        ibf_0_ce0,
        ibf_0_we0,
        ibf_0_d0,
        ibf_1_address0,
        ibf_1_ce0,
        ibf_1_we0,
        ibf_1_d0,
        ibf_2_address0,
        ibf_2_ce0,
        ibf_2_we0,
        ibf_2_d0,
        ibf_3_address0,
        ibf_3_ce0,
        ibf_3_we0,
        ibf_3_d0,
        line_buffer_address0,
        line_buffer_ce0,
        line_buffer_q0,
        ichh,
        hh,
        min_ifm_w,
        ifm_h,
        ifm_w,
        h_offset,
        w_offset,
        ich_enable,
        pad_value,
        enable
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] ibf_0_address0;
output   ibf_0_ce0;
output   ibf_0_we0;
output  [15:0] ibf_0_d0;
output  [12:0] ibf_1_address0;
output   ibf_1_ce0;
output   ibf_1_we0;
output  [15:0] ibf_1_d0;
output  [12:0] ibf_2_address0;
output   ibf_2_ce0;
output   ibf_2_we0;
output  [15:0] ibf_2_d0;
output  [12:0] ibf_3_address0;
output   ibf_3_ce0;
output   ibf_3_we0;
output  [15:0] ibf_3_d0;
output  [6:0] line_buffer_address0;
output   line_buffer_ce0;
input  [15:0] line_buffer_q0;
input  [1:0] ichh;
input  [7:0] hh;
input  [7:0] min_ifm_w;
input  [15:0] ifm_h;
input  [15:0] ifm_w;
input  [15:0] h_offset;
input  [15:0] w_offset;
input   ich_enable;
input  [15:0] pad_value;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ibf_0_ce0;
reg ibf_0_we0;
reg ibf_1_ce0;
reg ibf_1_we0;
reg ibf_2_ce0;
reg ibf_2_we0;
reg ibf_3_ce0;
reg ibf_3_we0;
reg line_buffer_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] ww_reg_201;
wire   [0:0] enable_read_read_fu_76_p2;
wire   [1:0] ichh_read_read_fu_130_p2;
wire   [16:0] zext_ln46_fu_251_p1;
reg   [16:0] zext_ln46_reg_382;
wire   [12:0] mul_ln46_fu_259_p2;
reg   [12:0] mul_ln46_reg_387;
wire   [0:0] or_ln46_3_fu_271_p2;
reg   [0:0] or_ln46_3_reg_392;
wire   [7:0] ww_2_fu_277_p2;
reg   [7:0] ww_2_reg_397;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_fu_283_p2;
reg   [0:0] icmp_ln43_reg_402;
wire   [12:0] add_ln46_fu_340_p2;
reg   [12:0] add_ln46_reg_411;
wire   [15:0] select_ln46_fu_345_p3;
reg   [15:0] select_ln46_reg_416;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] ap_phi_mux_ww_phi_fu_205_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln48_fu_288_p1;
wire   [31:0] zext_ln46_3_fu_352_p1;
wire   [15:0] zext_ln40_fu_213_p1;
wire  signed [15:0] hoffset_fu_217_p2;
wire  signed [16:0] sext_ln41_fu_223_p1;
wire   [16:0] zext_ln41_fu_235_p1;
wire   [0:0] icmp_ln41_fu_239_p2;
wire   [7:0] mul_ln46_fu_259_p0;
wire   [7:0] mul_ln46_fu_259_p1;
wire   [0:0] xor_ln41_fu_245_p2;
wire   [0:0] tmp_fu_227_p3;
wire   [0:0] or_ln46_2_fu_265_p2;
wire   [0:0] or_ln46_3_fu_271_p1;
wire   [15:0] zext_ln44_fu_293_p1;
wire  signed [15:0] woffset_fu_297_p2;
wire  signed [16:0] sext_ln45_fu_302_p1;
wire   [0:0] icmp_ln45_fu_314_p2;
wire   [0:0] tmp_1_fu_306_p3;
wire   [0:0] xor_ln45_fu_319_p2;
wire   [0:0] or_ln46_1_fu_325_p2;
wire   [12:0] zext_ln46_2_fu_336_p1;
wire   [0:0] or_ln46_fu_331_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] mul_ln46_fu_259_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

top_mul_8ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_8ns_8ns_13_1_1_U14(
    .din0(mul_ln46_fu_259_p0),
    .din1(mul_ln46_fu_259_p1),
    .dout(mul_ln46_fu_259_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ww_reg_201 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_402 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ww_reg_201 <= ww_2_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln46_reg_411 <= add_ln46_fu_340_p2;
        icmp_ln43_reg_402 <= icmp_ln43_fu_283_p2;
        select_ln46_reg_416 <= select_ln46_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln46_reg_387 <= mul_ln46_fu_259_p2;
        or_ln46_3_reg_392 <= or_ln46_3_fu_271_p2;
        zext_ln46_reg_382[15 : 0] <= zext_ln46_fu_251_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ww_2_reg_397 <= ww_2_fu_277_p2;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_283_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln43_reg_402 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ww_phi_fu_205_p4 = ww_2_reg_397;
    end else begin
        ap_phi_mux_ww_phi_fu_205_p4 = ww_reg_201;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_0_ce0 = 1'b1;
    end else begin
        ibf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ichh_read_read_fu_130_p2 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_0_we0 = 1'b1;
    end else begin
        ibf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_1_ce0 = 1'b1;
    end else begin
        ibf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ichh_read_read_fu_130_p2 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_1_we0 = 1'b1;
    end else begin
        ibf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_2_ce0 = 1'b1;
    end else begin
        ibf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ichh_read_read_fu_130_p2 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_2_we0 = 1'b1;
    end else begin
        ibf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_3_ce0 = 1'b1;
    end else begin
        ibf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ichh_read_read_fu_130_p2 == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibf_3_we0 = 1'b1;
    end else begin
        ibf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (enable_read_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (enable_read_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln43_fu_283_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln43_fu_283_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_340_p2 = (mul_ln46_reg_387 + zext_ln46_2_fu_336_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign enable_read_read_fu_76_p2 = enable;

assign hoffset_fu_217_p2 = (zext_ln40_fu_213_p1 + h_offset);

assign ibf_0_address0 = zext_ln46_3_fu_352_p1;

assign ibf_0_d0 = select_ln46_reg_416;

assign ibf_1_address0 = zext_ln46_3_fu_352_p1;

assign ibf_1_d0 = select_ln46_reg_416;

assign ibf_2_address0 = zext_ln46_3_fu_352_p1;

assign ibf_2_d0 = select_ln46_reg_416;

assign ibf_3_address0 = zext_ln46_3_fu_352_p1;

assign ibf_3_d0 = select_ln46_reg_416;

assign ichh_read_read_fu_130_p2 = ichh;

assign icmp_ln41_fu_239_p2 = (($signed(sext_ln41_fu_223_p1) < $signed(zext_ln41_fu_235_p1)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_283_p2 = ((ap_phi_mux_ww_phi_fu_205_p4 == min_ifm_w) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_314_p2 = (($signed(sext_ln45_fu_302_p1) < $signed(zext_ln46_reg_382)) ? 1'b1 : 1'b0);

assign line_buffer_address0 = zext_ln48_fu_288_p1;

assign mul_ln46_fu_259_p0 = mul_ln46_fu_259_p00;

assign mul_ln46_fu_259_p00 = hh;

assign mul_ln46_fu_259_p1 = 13'd81;

assign or_ln46_1_fu_325_p2 = (xor_ln45_fu_319_p2 | tmp_1_fu_306_p3);

assign or_ln46_2_fu_265_p2 = (xor_ln41_fu_245_p2 | tmp_fu_227_p3);

assign or_ln46_3_fu_271_p1 = ich_enable;

assign or_ln46_3_fu_271_p2 = (or_ln46_3_fu_271_p1 | or_ln46_2_fu_265_p2);

assign or_ln46_fu_331_p2 = (or_ln46_3_reg_392 | or_ln46_1_fu_325_p2);

assign select_ln46_fu_345_p3 = ((or_ln46_fu_331_p2[0:0] == 1'b1) ? pad_value : line_buffer_q0);

assign sext_ln41_fu_223_p1 = hoffset_fu_217_p2;

assign sext_ln45_fu_302_p1 = woffset_fu_297_p2;

assign tmp_1_fu_306_p3 = woffset_fu_297_p2[32'd15];

assign tmp_fu_227_p3 = hoffset_fu_217_p2[32'd15];

assign woffset_fu_297_p2 = (zext_ln44_fu_293_p1 + w_offset);

assign ww_2_fu_277_p2 = (ap_phi_mux_ww_phi_fu_205_p4 + 8'd1);

assign xor_ln41_fu_245_p2 = (icmp_ln41_fu_239_p2 ^ 1'd1);

assign xor_ln45_fu_319_p2 = (icmp_ln45_fu_314_p2 ^ 1'd1);

assign zext_ln40_fu_213_p1 = hh;

assign zext_ln41_fu_235_p1 = ifm_h;

assign zext_ln44_fu_293_p1 = ww_reg_201;

assign zext_ln46_2_fu_336_p1 = ww_reg_201;

assign zext_ln46_3_fu_352_p1 = add_ln46_reg_411;

assign zext_ln46_fu_251_p1 = ifm_w;

assign zext_ln48_fu_288_p1 = ap_phi_mux_ww_phi_fu_205_p4;

always @ (posedge ap_clk) begin
    zext_ln46_reg_382[16] <= 1'b0;
end

endmodule //top_load_pp1
