// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_save_pp0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        obf_0_address0,
        obf_0_ce0,
        obf_0_q0,
        obf_1_address0,
        obf_1_ce0,
        obf_1_q0,
        obf_2_address0,
        obf_2_ce0,
        obf_2_q0,
        obf_3_address0,
        obf_3_ce0,
        obf_3_q0,
        obf_4_address0,
        obf_4_ce0,
        obf_4_q0,
        obf_5_address0,
        obf_5_ce0,
        obf_5_q0,
        obf_6_address0,
        obf_6_ce0,
        obf_6_q0,
        obf_7_address0,
        obf_7_ce0,
        obf_7_q0,
        obf_8_address0,
        obf_8_ce0,
        obf_8_q0,
        obf_9_address0,
        obf_9_ce0,
        obf_9_q0,
        obf_10_address0,
        obf_10_ce0,
        obf_10_q0,
        obf_11_address0,
        obf_11_ce0,
        obf_11_q0,
        obf_12_address0,
        obf_12_ce0,
        obf_12_q0,
        obf_13_address0,
        obf_13_ce0,
        obf_13_q0,
        obf_14_address0,
        obf_14_ce0,
        obf_14_q0,
        obf_15_address0,
        obf_15_ce0,
        obf_15_q0,
        obf_16_address0,
        obf_16_ce0,
        obf_16_q0,
        obf_17_address0,
        obf_17_ce0,
        obf_17_q0,
        obf_18_address0,
        obf_18_ce0,
        obf_18_q0,
        obf_19_address0,
        obf_19_ce0,
        obf_19_q0,
        obf_20_address0,
        obf_20_ce0,
        obf_20_q0,
        obf_21_address0,
        obf_21_ce0,
        obf_21_q0,
        obf_22_address0,
        obf_22_ce0,
        obf_22_q0,
        obf_23_address0,
        obf_23_ce0,
        obf_23_q0,
        obf_24_address0,
        obf_24_ce0,
        obf_24_q0,
        obf_25_address0,
        obf_25_ce0,
        obf_25_q0,
        obf_26_address0,
        obf_26_ce0,
        obf_26_q0,
        obf_27_address0,
        obf_27_ce0,
        obf_27_q0,
        obf_28_address0,
        obf_28_ce0,
        obf_28_q0,
        obf_29_address0,
        obf_29_ce0,
        obf_29_q0,
        obf_30_address0,
        obf_30_ce0,
        obf_30_q0,
        obf_31_address0,
        obf_31_ce0,
        obf_31_q0,
        line_buffer_address0,
        line_buffer_ce0,
        line_buffer_we0,
        line_buffer_d0,
        ochh,
        hh,
        min_ofm_w,
        enable
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] obf_0_address0;
output   obf_0_ce0;
input  [15:0] obf_0_q0;
output  [10:0] obf_1_address0;
output   obf_1_ce0;
input  [15:0] obf_1_q0;
output  [10:0] obf_2_address0;
output   obf_2_ce0;
input  [15:0] obf_2_q0;
output  [10:0] obf_3_address0;
output   obf_3_ce0;
input  [15:0] obf_3_q0;
output  [10:0] obf_4_address0;
output   obf_4_ce0;
input  [15:0] obf_4_q0;
output  [10:0] obf_5_address0;
output   obf_5_ce0;
input  [15:0] obf_5_q0;
output  [10:0] obf_6_address0;
output   obf_6_ce0;
input  [15:0] obf_6_q0;
output  [10:0] obf_7_address0;
output   obf_7_ce0;
input  [15:0] obf_7_q0;
output  [10:0] obf_8_address0;
output   obf_8_ce0;
input  [15:0] obf_8_q0;
output  [10:0] obf_9_address0;
output   obf_9_ce0;
input  [15:0] obf_9_q0;
output  [10:0] obf_10_address0;
output   obf_10_ce0;
input  [15:0] obf_10_q0;
output  [10:0] obf_11_address0;
output   obf_11_ce0;
input  [15:0] obf_11_q0;
output  [10:0] obf_12_address0;
output   obf_12_ce0;
input  [15:0] obf_12_q0;
output  [10:0] obf_13_address0;
output   obf_13_ce0;
input  [15:0] obf_13_q0;
output  [10:0] obf_14_address0;
output   obf_14_ce0;
input  [15:0] obf_14_q0;
output  [10:0] obf_15_address0;
output   obf_15_ce0;
input  [15:0] obf_15_q0;
output  [10:0] obf_16_address0;
output   obf_16_ce0;
input  [15:0] obf_16_q0;
output  [10:0] obf_17_address0;
output   obf_17_ce0;
input  [15:0] obf_17_q0;
output  [10:0] obf_18_address0;
output   obf_18_ce0;
input  [15:0] obf_18_q0;
output  [10:0] obf_19_address0;
output   obf_19_ce0;
input  [15:0] obf_19_q0;
output  [10:0] obf_20_address0;
output   obf_20_ce0;
input  [15:0] obf_20_q0;
output  [10:0] obf_21_address0;
output   obf_21_ce0;
input  [15:0] obf_21_q0;
output  [10:0] obf_22_address0;
output   obf_22_ce0;
input  [15:0] obf_22_q0;
output  [10:0] obf_23_address0;
output   obf_23_ce0;
input  [15:0] obf_23_q0;
output  [10:0] obf_24_address0;
output   obf_24_ce0;
input  [15:0] obf_24_q0;
output  [10:0] obf_25_address0;
output   obf_25_ce0;
input  [15:0] obf_25_q0;
output  [10:0] obf_26_address0;
output   obf_26_ce0;
input  [15:0] obf_26_q0;
output  [10:0] obf_27_address0;
output   obf_27_ce0;
input  [15:0] obf_27_q0;
output  [10:0] obf_28_address0;
output   obf_28_ce0;
input  [15:0] obf_28_q0;
output  [10:0] obf_29_address0;
output   obf_29_ce0;
input  [15:0] obf_29_q0;
output  [10:0] obf_30_address0;
output   obf_30_ce0;
input  [15:0] obf_30_q0;
output  [10:0] obf_31_address0;
output   obf_31_ce0;
input  [15:0] obf_31_q0;
output  [5:0] line_buffer_address0;
output   line_buffer_ce0;
output   line_buffer_we0;
output  [15:0] line_buffer_d0;
input  [4:0] ochh;
input  [5:0] hh;
input  [7:0] min_ofm_w;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg obf_0_ce0;
reg obf_1_ce0;
reg obf_2_ce0;
reg obf_3_ce0;
reg obf_4_ce0;
reg obf_5_ce0;
reg obf_6_ce0;
reg obf_7_ce0;
reg obf_8_ce0;
reg obf_9_ce0;
reg obf_10_ce0;
reg obf_11_ce0;
reg obf_12_ce0;
reg obf_13_ce0;
reg obf_14_ce0;
reg obf_15_ce0;
reg obf_16_ce0;
reg obf_17_ce0;
reg obf_18_ce0;
reg obf_19_ce0;
reg obf_20_ce0;
reg obf_21_ce0;
reg obf_22_ce0;
reg obf_23_ce0;
reg obf_24_ce0;
reg obf_25_ce0;
reg obf_26_ce0;
reg obf_27_ce0;
reg obf_28_ce0;
reg obf_29_ce0;
reg obf_30_ce0;
reg obf_31_ce0;
reg line_buffer_ce0;
reg line_buffer_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] ww_reg_569;
reg   [7:0] ww_reg_569_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] enable_read_read_fu_116_p2;
wire   [10:0] add_ln304_fu_601_p2;
reg   [10:0] add_ln304_reg_751;
wire   [7:0] ww_1_fu_607_p2;
reg   [7:0] ww_1_reg_756;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln303_fu_613_p2;
reg   [0:0] icmp_ln303_reg_761;
reg   [0:0] icmp_ln303_reg_761_pp0_iter1_reg;
wire   [15:0] tmp_fu_663_p34;
reg   [15:0] tmp_reg_925;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] ap_phi_mux_ww_phi_fu_573_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln304_3_fu_627_p1;
wire   [31:0] zext_ln304_1_fu_732_p1;
wire   [8:0] tmp_2_fu_589_p3;
wire   [10:0] tmp_1_fu_581_p3;
wire   [10:0] zext_ln304_fu_597_p1;
wire   [10:0] zext_ln304_2_fu_618_p1;
wire   [10:0] add_ln304_1_fu_622_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

top_mux_325_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_325_16_1_1_U745(
    .din0(obf_0_q0),
    .din1(obf_1_q0),
    .din2(obf_2_q0),
    .din3(obf_3_q0),
    .din4(obf_4_q0),
    .din5(obf_5_q0),
    .din6(obf_6_q0),
    .din7(obf_7_q0),
    .din8(obf_8_q0),
    .din9(obf_9_q0),
    .din10(obf_10_q0),
    .din11(obf_11_q0),
    .din12(obf_12_q0),
    .din13(obf_13_q0),
    .din14(obf_14_q0),
    .din15(obf_15_q0),
    .din16(obf_16_q0),
    .din17(obf_17_q0),
    .din18(obf_18_q0),
    .din19(obf_19_q0),
    .din20(obf_20_q0),
    .din21(obf_21_q0),
    .din22(obf_22_q0),
    .din23(obf_23_q0),
    .din24(obf_24_q0),
    .din25(obf_25_q0),
    .din26(obf_26_q0),
    .din27(obf_27_q0),
    .din28(obf_28_q0),
    .din29(obf_29_q0),
    .din30(obf_30_q0),
    .din31(obf_31_q0),
    .din32(ochh),
    .dout(tmp_fu_663_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ww_reg_569 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln303_reg_761 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ww_reg_569 <= ww_1_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln304_reg_751[10 : 3] <= add_ln304_fu_601_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln303_reg_761 <= icmp_ln303_fu_613_p2;
        icmp_ln303_reg_761_pp0_iter1_reg <= icmp_ln303_reg_761;
        ww_reg_569_pp0_iter1_reg <= ww_reg_569;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln303_reg_761 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_925 <= tmp_fu_663_p34;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ww_1_reg_756 <= ww_1_fu_607_p2;
    end
end

always @ (*) begin
    if ((icmp_ln303_fu_613_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln303_reg_761 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ww_phi_fu_573_p4 = ww_1_reg_756;
    end else begin
        ap_phi_mux_ww_phi_fu_573_p4 = ww_reg_569;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln303_reg_761_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_we0 = 1'b1;
    end else begin
        line_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_0_ce0 = 1'b1;
    end else begin
        obf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_10_ce0 = 1'b1;
    end else begin
        obf_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_11_ce0 = 1'b1;
    end else begin
        obf_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_12_ce0 = 1'b1;
    end else begin
        obf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_13_ce0 = 1'b1;
    end else begin
        obf_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_14_ce0 = 1'b1;
    end else begin
        obf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_15_ce0 = 1'b1;
    end else begin
        obf_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_16_ce0 = 1'b1;
    end else begin
        obf_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_17_ce0 = 1'b1;
    end else begin
        obf_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_18_ce0 = 1'b1;
    end else begin
        obf_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_19_ce0 = 1'b1;
    end else begin
        obf_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_1_ce0 = 1'b1;
    end else begin
        obf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_20_ce0 = 1'b1;
    end else begin
        obf_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_21_ce0 = 1'b1;
    end else begin
        obf_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_22_ce0 = 1'b1;
    end else begin
        obf_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_23_ce0 = 1'b1;
    end else begin
        obf_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_24_ce0 = 1'b1;
    end else begin
        obf_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_25_ce0 = 1'b1;
    end else begin
        obf_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_26_ce0 = 1'b1;
    end else begin
        obf_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_27_ce0 = 1'b1;
    end else begin
        obf_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_28_ce0 = 1'b1;
    end else begin
        obf_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_29_ce0 = 1'b1;
    end else begin
        obf_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_2_ce0 = 1'b1;
    end else begin
        obf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_30_ce0 = 1'b1;
    end else begin
        obf_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_31_ce0 = 1'b1;
    end else begin
        obf_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_3_ce0 = 1'b1;
    end else begin
        obf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_4_ce0 = 1'b1;
    end else begin
        obf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_5_ce0 = 1'b1;
    end else begin
        obf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_6_ce0 = 1'b1;
    end else begin
        obf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_7_ce0 = 1'b1;
    end else begin
        obf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_8_ce0 = 1'b1;
    end else begin
        obf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        obf_9_ce0 = 1'b1;
    end else begin
        obf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (enable_read_read_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (enable_read_read_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln303_fu_613_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln303_fu_613_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_1_fu_622_p2 = (add_ln304_reg_751 + zext_ln304_2_fu_618_p1);

assign add_ln304_fu_601_p2 = (tmp_1_fu_581_p3 + zext_ln304_fu_597_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign enable_read_read_fu_116_p2 = enable;

assign icmp_ln303_fu_613_p2 = ((ap_phi_mux_ww_phi_fu_573_p4 == min_ofm_w) ? 1'b1 : 1'b0);

assign line_buffer_address0 = zext_ln304_1_fu_732_p1;

assign line_buffer_d0 = tmp_reg_925;

assign obf_0_address0 = zext_ln304_3_fu_627_p1;

assign obf_10_address0 = zext_ln304_3_fu_627_p1;

assign obf_11_address0 = zext_ln304_3_fu_627_p1;

assign obf_12_address0 = zext_ln304_3_fu_627_p1;

assign obf_13_address0 = zext_ln304_3_fu_627_p1;

assign obf_14_address0 = zext_ln304_3_fu_627_p1;

assign obf_15_address0 = zext_ln304_3_fu_627_p1;

assign obf_16_address0 = zext_ln304_3_fu_627_p1;

assign obf_17_address0 = zext_ln304_3_fu_627_p1;

assign obf_18_address0 = zext_ln304_3_fu_627_p1;

assign obf_19_address0 = zext_ln304_3_fu_627_p1;

assign obf_1_address0 = zext_ln304_3_fu_627_p1;

assign obf_20_address0 = zext_ln304_3_fu_627_p1;

assign obf_21_address0 = zext_ln304_3_fu_627_p1;

assign obf_22_address0 = zext_ln304_3_fu_627_p1;

assign obf_23_address0 = zext_ln304_3_fu_627_p1;

assign obf_24_address0 = zext_ln304_3_fu_627_p1;

assign obf_25_address0 = zext_ln304_3_fu_627_p1;

assign obf_26_address0 = zext_ln304_3_fu_627_p1;

assign obf_27_address0 = zext_ln304_3_fu_627_p1;

assign obf_28_address0 = zext_ln304_3_fu_627_p1;

assign obf_29_address0 = zext_ln304_3_fu_627_p1;

assign obf_2_address0 = zext_ln304_3_fu_627_p1;

assign obf_30_address0 = zext_ln304_3_fu_627_p1;

assign obf_31_address0 = zext_ln304_3_fu_627_p1;

assign obf_3_address0 = zext_ln304_3_fu_627_p1;

assign obf_4_address0 = zext_ln304_3_fu_627_p1;

assign obf_5_address0 = zext_ln304_3_fu_627_p1;

assign obf_6_address0 = zext_ln304_3_fu_627_p1;

assign obf_7_address0 = zext_ln304_3_fu_627_p1;

assign obf_8_address0 = zext_ln304_3_fu_627_p1;

assign obf_9_address0 = zext_ln304_3_fu_627_p1;

assign tmp_1_fu_581_p3 = {{hh}, {5'd0}};

assign tmp_2_fu_589_p3 = {{hh}, {3'd0}};

assign ww_1_fu_607_p2 = (ap_phi_mux_ww_phi_fu_573_p4 + 8'd1);

assign zext_ln304_1_fu_732_p1 = ww_reg_569_pp0_iter1_reg;

assign zext_ln304_2_fu_618_p1 = ap_phi_mux_ww_phi_fu_573_p4;

assign zext_ln304_3_fu_627_p1 = add_ln304_1_fu_622_p2;

assign zext_ln304_fu_597_p1 = tmp_2_fu_589_p3;

always @ (posedge ap_clk) begin
    add_ln304_reg_751[2:0] <= 3'b000;
end

endmodule //top_save_pp0
