// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_save_pp1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ofm_AWVALID,
        m_axi_ofm_AWREADY,
        m_axi_ofm_AWADDR,
        m_axi_ofm_AWID,
        m_axi_ofm_AWLEN,
        m_axi_ofm_AWSIZE,
        m_axi_ofm_AWBURST,
        m_axi_ofm_AWLOCK,
        m_axi_ofm_AWCACHE,
        m_axi_ofm_AWPROT,
        m_axi_ofm_AWQOS,
        m_axi_ofm_AWREGION,
        m_axi_ofm_AWUSER,
        m_axi_ofm_WVALID,
        m_axi_ofm_WREADY,
        m_axi_ofm_WDATA,
        m_axi_ofm_WSTRB,
        m_axi_ofm_WLAST,
        m_axi_ofm_WID,
        m_axi_ofm_WUSER,
        m_axi_ofm_ARVALID,
        m_axi_ofm_ARREADY,
        m_axi_ofm_ARADDR,
        m_axi_ofm_ARID,
        m_axi_ofm_ARLEN,
        m_axi_ofm_ARSIZE,
        m_axi_ofm_ARBURST,
        m_axi_ofm_ARLOCK,
        m_axi_ofm_ARCACHE,
        m_axi_ofm_ARPROT,
        m_axi_ofm_ARQOS,
        m_axi_ofm_ARREGION,
        m_axi_ofm_ARUSER,
        m_axi_ofm_RVALID,
        m_axi_ofm_RREADY,
        m_axi_ofm_RDATA,
        m_axi_ofm_RLAST,
        m_axi_ofm_RID,
        m_axi_ofm_RUSER,
        m_axi_ofm_RRESP,
        m_axi_ofm_BVALID,
        m_axi_ofm_BREADY,
        m_axi_ofm_BRESP,
        m_axi_ofm_BID,
        m_axi_ofm_BUSER,
        ofm_out,
        line_buffer_address0,
        line_buffer_ce0,
        line_buffer_q0,
        ochh,
        hh,
        min_ofm_w,
        ofm_h,
        ofm_w,
        enable
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_pp0_stage0 = 14'd256;
parameter    ap_ST_fsm_state12 = 14'd512;
parameter    ap_ST_fsm_state13 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ofm_AWVALID;
input   m_axi_ofm_AWREADY;
output  [31:0] m_axi_ofm_AWADDR;
output  [0:0] m_axi_ofm_AWID;
output  [31:0] m_axi_ofm_AWLEN;
output  [2:0] m_axi_ofm_AWSIZE;
output  [1:0] m_axi_ofm_AWBURST;
output  [1:0] m_axi_ofm_AWLOCK;
output  [3:0] m_axi_ofm_AWCACHE;
output  [2:0] m_axi_ofm_AWPROT;
output  [3:0] m_axi_ofm_AWQOS;
output  [3:0] m_axi_ofm_AWREGION;
output  [0:0] m_axi_ofm_AWUSER;
output   m_axi_ofm_WVALID;
input   m_axi_ofm_WREADY;
output  [15:0] m_axi_ofm_WDATA;
output  [1:0] m_axi_ofm_WSTRB;
output   m_axi_ofm_WLAST;
output  [0:0] m_axi_ofm_WID;
output  [0:0] m_axi_ofm_WUSER;
output   m_axi_ofm_ARVALID;
input   m_axi_ofm_ARREADY;
output  [31:0] m_axi_ofm_ARADDR;
output  [0:0] m_axi_ofm_ARID;
output  [31:0] m_axi_ofm_ARLEN;
output  [2:0] m_axi_ofm_ARSIZE;
output  [1:0] m_axi_ofm_ARBURST;
output  [1:0] m_axi_ofm_ARLOCK;
output  [3:0] m_axi_ofm_ARCACHE;
output  [2:0] m_axi_ofm_ARPROT;
output  [3:0] m_axi_ofm_ARQOS;
output  [3:0] m_axi_ofm_ARREGION;
output  [0:0] m_axi_ofm_ARUSER;
input   m_axi_ofm_RVALID;
output   m_axi_ofm_RREADY;
input  [15:0] m_axi_ofm_RDATA;
input   m_axi_ofm_RLAST;
input  [0:0] m_axi_ofm_RID;
input  [0:0] m_axi_ofm_RUSER;
input  [1:0] m_axi_ofm_RRESP;
input   m_axi_ofm_BVALID;
output   m_axi_ofm_BREADY;
input  [1:0] m_axi_ofm_BRESP;
input  [0:0] m_axi_ofm_BID;
input  [0:0] m_axi_ofm_BUSER;
input  [31:0] ofm_out;
output  [5:0] line_buffer_address0;
output   line_buffer_ce0;
input  [15:0] line_buffer_q0;
input  [7:0] ochh;
input  [7:0] hh;
input  [7:0] min_ofm_w;
input  [15:0] ofm_h;
input  [15:0] ofm_w;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_ofm_AWVALID;
reg m_axi_ofm_WVALID;
reg m_axi_ofm_BREADY;
reg line_buffer_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ofm_blk_n_AW;
wire    ap_CS_fsm_state8;
reg    ofm_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond3_reg_309;
reg   [0:0] exitcond3_reg_309_pp0_iter1_reg;
reg    ofm_blk_n_B;
wire    ap_CS_fsm_state16;
wire   [0:0] enable_read_read_fu_78_p2;
reg   [7:0] loop_index_reg_148;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [31:0] ofm_addr_reg_298;
wire    ap_CS_fsm_state7;
wire   [7:0] empty_73_fu_212_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond3_fu_218_p2;
reg   [15:0] line_buffer_load_reg_318;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] loop_index_cast_cast_fu_227_p1;
wire  signed [31:0] p_cast_cast_fu_198_p1;
reg    ap_block_state16;
wire    ap_block_pp0_stage0_01001;
wire   [23:0] grp_fu_232_p3;
wire   [30:0] grp_fu_241_p2;
wire   [31:0] tmp_fu_176_p3;
wire   [31:0] empty_71_fu_183_p2;
wire   [30:0] p_cast_fu_188_p4;
wire   [5:0] empty_75_fu_223_p1;
wire   [15:0] grp_fu_232_p0;
wire   [7:0] grp_fu_232_p1;
wire   [7:0] grp_fu_232_p2;
wire   [23:0] grp_fu_241_p0;
wire   [15:0] grp_fu_241_p1;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] grp_fu_232_p00;
wire   [23:0] grp_fu_232_p10;
wire   [23:0] grp_fu_232_p20;
wire   [30:0] grp_fu_241_p00;
wire   [30:0] grp_fu_241_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

top_mac_muladd_16ns_8ns_8ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mac_muladd_16ns_8ns_8ns_24_4_1_U784(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_232_p0),
    .din1(grp_fu_232_p1),
    .din2(grp_fu_232_p2),
    .ce(1'b1),
    .dout(grp_fu_232_p3)
);

top_mul_mul_24ns_16ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_mul_24ns_16ns_31_4_1_U785(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_241_p0),
    .din1(grp_fu_241_p1),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_ofm_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((m_axi_ofm_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_ofm_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        loop_index_reg_148 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_fu_218_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index_reg_148 <= empty_73_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond3_reg_309 <= exitcond3_fu_218_p2;
        exitcond3_reg_309_pp0_iter1_reg <= exitcond3_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_reg_309 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_load_reg_318 <= line_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofm_addr_reg_298 <= p_cast_cast_fu_198_p1;
    end
end

always @ (*) begin
    if ((exitcond3_fu_218_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | (~((m_axi_ofm_BVALID == 1'b0) & (enable_read_read_fu_78_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_ofm_BVALID == 1'b0) & (enable_read_read_fu_78_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_ce0 = 1'b1;
    end else begin
        line_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_ofm_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        m_axi_ofm_AWVALID = 1'b1;
    end else begin
        m_axi_ofm_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_ofm_BVALID == 1'b0) & (enable_read_read_fu_78_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16) & (enable_read_read_fu_78_p2 == 1'd1))) begin
        m_axi_ofm_BREADY = 1'b1;
    end else begin
        m_axi_ofm_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_309_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_ofm_WVALID = 1'b1;
    end else begin
        m_axi_ofm_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ofm_blk_n_AW = m_axi_ofm_AWREADY;
    end else begin
        ofm_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (enable_read_read_fu_78_p2 == 1'd1))) begin
        ofm_blk_n_B = m_axi_ofm_BVALID;
    end else begin
        ofm_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_reg_309_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ofm_blk_n_W = m_axi_ofm_WREADY;
    end else begin
        ofm_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_78_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_78_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_ofm_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_218_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_218_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if ((~((m_axi_ofm_BVALID == 1'b0) & (enable_read_read_fu_78_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((m_axi_ofm_WREADY == 1'b0) & (exitcond3_reg_309_pp0_iter1_reg == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16 = ((m_axi_ofm_BVALID == 1'b0) & (enable_read_read_fu_78_p2 == 1'd1));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_71_fu_183_p2 = (tmp_fu_176_p3 + ofm_out);

assign empty_73_fu_212_p2 = (loop_index_reg_148 + 8'd1);

assign empty_75_fu_223_p1 = loop_index_reg_148[5:0];

assign enable_read_read_fu_78_p2 = enable;

assign exitcond3_fu_218_p2 = ((loop_index_reg_148 == min_ofm_w) ? 1'b1 : 1'b0);

assign grp_fu_232_p0 = grp_fu_232_p00;

assign grp_fu_232_p00 = ofm_h;

assign grp_fu_232_p1 = grp_fu_232_p10;

assign grp_fu_232_p10 = ochh;

assign grp_fu_232_p2 = grp_fu_232_p20;

assign grp_fu_232_p20 = hh;

assign grp_fu_241_p0 = grp_fu_241_p00;

assign grp_fu_241_p00 = grp_fu_232_p3;

assign grp_fu_241_p1 = grp_fu_241_p10;

assign grp_fu_241_p10 = ofm_w;

assign line_buffer_address0 = loop_index_cast_cast_fu_227_p1;

assign loop_index_cast_cast_fu_227_p1 = empty_75_fu_223_p1;

assign m_axi_ofm_ARADDR = 32'd0;

assign m_axi_ofm_ARBURST = 2'd0;

assign m_axi_ofm_ARCACHE = 4'd0;

assign m_axi_ofm_ARID = 1'd0;

assign m_axi_ofm_ARLEN = 32'd0;

assign m_axi_ofm_ARLOCK = 2'd0;

assign m_axi_ofm_ARPROT = 3'd0;

assign m_axi_ofm_ARQOS = 4'd0;

assign m_axi_ofm_ARREGION = 4'd0;

assign m_axi_ofm_ARSIZE = 3'd0;

assign m_axi_ofm_ARUSER = 1'd0;

assign m_axi_ofm_ARVALID = 1'b0;

assign m_axi_ofm_AWADDR = ofm_addr_reg_298;

assign m_axi_ofm_AWBURST = 2'd0;

assign m_axi_ofm_AWCACHE = 4'd0;

assign m_axi_ofm_AWID = 1'd0;

assign m_axi_ofm_AWLEN = min_ofm_w;

assign m_axi_ofm_AWLOCK = 2'd0;

assign m_axi_ofm_AWPROT = 3'd0;

assign m_axi_ofm_AWQOS = 4'd0;

assign m_axi_ofm_AWREGION = 4'd0;

assign m_axi_ofm_AWSIZE = 3'd0;

assign m_axi_ofm_AWUSER = 1'd0;

assign m_axi_ofm_RREADY = 1'b0;

assign m_axi_ofm_WDATA = line_buffer_load_reg_318;

assign m_axi_ofm_WID = 1'd0;

assign m_axi_ofm_WLAST = 1'b0;

assign m_axi_ofm_WSTRB = 2'd3;

assign m_axi_ofm_WUSER = 1'd0;

assign p_cast_cast_fu_198_p1 = $signed(p_cast_fu_188_p4);

assign p_cast_fu_188_p4 = {{empty_71_fu_183_p2[31:1]}};

assign tmp_fu_176_p3 = {{grp_fu_241_p2}, {1'd0}};

endmodule //top_save_pp1
